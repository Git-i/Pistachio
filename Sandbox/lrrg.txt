Thread 0, Frame 0:
vkCreateInstance(pCreateInfo, pAllocator, pInstance) returns VkResult VK_SUCCESS (0):
    pCreateInfo: const VkInstanceCreateInfo* = 00000047B9FEE240:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (1)
        pNext:               const void* = NULL
        flags:     VkInstanceCreateFlags = 0
        pApplicationInfo: const VkApplicationInfo* = 00000047B9FEE210:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO (0)
            pNext:               const void* = NULL
            pApplicationName:    const char* = NULL
            applicationVersion:     uint32_t = 0
            pEngineName:         const char* = NULL
            engineVersion:          uint32_t = 0
            apiVersion:             uint32_t = 4198400
        enabledLayerCount:      uint32_t = 1
        ppEnabledLayerNames: const char* const* = 00000047B9FEE9C8
            ppEnabledLayerNames[0]: const char* const = "VK_LAYER_KHRONOS_validation"
        enabledExtensionCount:  uint32_t = 3
        ppEnabledExtensionNames: const char* const* = 00000047B9FEE9E8
            ppEnabledExtensionNames[0]: const char* const = "VK_KHR_surface"
            ppEnabledExtensionNames[1]: const char* const = "VK_KHR_win32_surface"
            ppEnabledExtensionNames[2]: const char* const = "VK_EXT_debug_utils"
        pNext:               const void* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pInstance:           VkInstance* = 000001A59EB02F90

Thread 0, Frame 0:
vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pCreateInfo: const VkDebugUtilsMessengerCreateInfoEXT* = 00000047B9FEEA38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (1000128004)
        pNext:               const void* = NULL
        flags: VkDebugUtilsMessengerCreateFlagsEXT = 0
        messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT = 4353 (VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
        messageType: VkDebugUtilsMessageTypeFlagsEXT = 7 (VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT)
        pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT = 00007FFBBA05B2D0
        pUserData:                 void* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pMessenger: VkDebugUtilsMessengerEXT* = FD5B260000000001

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = 000001A5A1692090
        pPhysicalDevices[0]: VkPhysicalDevice = 000001A5A2346D80
        pPhysicalDevices[1]: VkPhysicalDevice = 000001A5A2346750

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pProperties: VkPhysicalDeviceProperties* = 000001A5A25E9160:
        apiVersion:             uint32_t = 4206807
        driverVersion:          uint32_t = 1657895
        vendorID:               uint32_t = 32902
        deviceID:               uint32_t = 39497
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) Iris(R) Xe Graphics"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 000001A5A25E9274
            pipelineCacheUUID[0]:    uint8_t = 22
            pipelineCacheUUID[1]:    uint8_t = 59
            pipelineCacheUUID[2]:    uint8_t = 18
            pipelineCacheUUID[3]:    uint8_t = 57
            pipelineCacheUUID[4]:    uint8_t = 17
            pipelineCacheUUID[5]:    uint8_t = 50
            pipelineCacheUUID[6]:    uint8_t = 33
            pipelineCacheUUID[7]:    uint8_t = 54
            pipelineCacheUUID[8]:    uint8_t = 31
            pipelineCacheUUID[9]:    uint8_t = 59
            pipelineCacheUUID[10]:   uint8_t = 29
            pipelineCacheUUID[11]:   uint8_t = 53
            pipelineCacheUUID[12]:   uint8_t = 26
            pipelineCacheUUID[13]:   uint8_t = 49
            pipelineCacheUUID[14]:   uint8_t = 24
            pipelineCacheUUID[15]:   uint8_t = 0
        limits:   VkPhysicalDeviceLimits = 000001A5A25E9288:
            maxImageDimension1D:    uint32_t = 16384
            maxImageDimension2D:    uint32_t = 16384
            maxImageDimension3D:    uint32_t = 2048
            maxImageDimensionCube:  uint32_t = 16384
            maxImageArrayLayers:    uint32_t = 2048
            maxTexelBufferElements: uint32_t = 134217728
            maxUniformBufferRange:  uint32_t = 134217724
            maxStorageBufferRange:  uint32_t = 1073741820
            maxPushConstantsSize:   uint32_t = 256
            maxMemoryAllocationCount: uint32_t = 2090411
            maxSamplerAllocationCount: uint32_t = 4000
            bufferImageGranularity: VkDeviceSize = 1
            sparseAddressSpaceSize: VkDeviceSize = 17523466567680
            maxBoundDescriptorSets: uint32_t = 32
            maxPerStageDescriptorSamplers: uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 7
            maxPerStageResources:   uint32_t = 200
            maxDescriptorSetSamplers: uint32_t = 576
            maxDescriptorSetUniformBuffers: uint32_t = 1800
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1800
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages: uint32_t = 1800
            maxDescriptorSetStorageImages: uint32_t = 144
            maxDescriptorSetInputAttachments: uint32_t = 7
            maxVertexInputAttributes: uint32_t = 32
            maxVertexInputBindings: uint32_t = 32
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 4095
            maxVertexOutputComponents: uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations: uint32_t = 32
            maxGeometryInputComponents: uint32_t = 128
            maxGeometryOutputComponents: uint32_t = 128
            maxGeometryOutputVertices: uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents: uint32_t = 128
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize: uint32_t = 32768
            maxComputeWorkGroupCount: uint32_t[3] = 000001A5A25E9364
                maxComputeWorkGroupCount[0]: uint32_t = 65536
                maxComputeWorkGroupCount[1]: uint32_t = 65536
                maxComputeWorkGroupCount[2]: uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 000001A5A25E9374
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 64
            subPixelPrecisionBits:  uint32_t = 8
            subTexelPrecisionBits:  uint32_t = 8
            mipmapPrecisionBits:    uint32_t = 8
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount:   uint32_t = 4294967295
            maxSamplerLodBias:         float = 16
            maxSamplerAnisotropy:      float = 16
            maxViewports:           uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 000001A5A25E93A0
                maxViewportDimensions[0]: uint32_t = 32768
                maxViewportDimensions[1]: uint32_t = 32768
            viewportBoundsRange:    float[2] = 000001A5A25E93A8
                viewportBoundsRange[0]:    float = -65536
                viewportBoundsRange[1]:    float = 65535
            viewportSubPixelBits:   uint32_t = 8
            minMemoryMapAlignment:    size_t = 64
            minTexelBufferOffsetAlignment: VkDeviceSize = 64
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 64
            minTexelOffset:          int32_t = -8
            maxTexelOffset:         uint32_t = 7
            minTexelGatherOffset:    int32_t = -32
            maxTexelGatherOffset:   uint32_t = 31
            minInterpolationOffset:    float = -0.5
            maxInterpolationOffset:    float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:    uint32_t = 16384
            maxFramebufferHeight:   uint32_t = 16384
            maxFramebufferLayers:   uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:    uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:     uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod:           float = 52.0833
            maxClipDistances:       uint32_t = 8
            maxCullDistances:       uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange:         float[2] = 000001A5A25E9444
                pointSizeRange[0]:         float = 0.125
                pointSizeRange[1]:         float = 255.875
            lineWidthRange:         float[2] = 000001A5A25E944C
                lineWidthRange[0]:         float = 0
                lineWidthRange[1]:         float = 7.99219
            pointSizeGranularity:      float = 0.125
            lineWidthGranularity:      float = 0.0078125
            strictLines:            VkBool32 = 0
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 64
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64
            nonCoherentAtomSize: VkDeviceSize = 1
        sparseProperties: VkPhysicalDeviceSparseProperties = 000001A5A25E9480:
            residencyStandard2DBlockShape: VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape: VkBool32 = 1
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346750
    pProperties: VkPhysicalDeviceProperties* = 000001A5A25E94B0:
        apiVersion:             uint32_t = 4206852
        driverVersion:          uint32_t = 2290368512
        vendorID:               uint32_t = 4318
        deviceID:               uint32_t = 9634
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050 Laptop GPU"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 000001A5A25E95C4
            pipelineCacheUUID[0]:    uint8_t = 41
            pipelineCacheUUID[1]:    uint8_t = 189
            pipelineCacheUUID[2]:    uint8_t = 0
            pipelineCacheUUID[3]:    uint8_t = 70
            pipelineCacheUUID[4]:    uint8_t = 26
            pipelineCacheUUID[5]:    uint8_t = 200
            pipelineCacheUUID[6]:    uint8_t = 238
            pipelineCacheUUID[7]:    uint8_t = 247
            pipelineCacheUUID[8]:    uint8_t = 242
            pipelineCacheUUID[9]:    uint8_t = 138
            pipelineCacheUUID[10]:   uint8_t = 158
            pipelineCacheUUID[11]:   uint8_t = 47
            pipelineCacheUUID[12]:   uint8_t = 8
            pipelineCacheUUID[13]:   uint8_t = 89
            pipelineCacheUUID[14]:   uint8_t = 160
            pipelineCacheUUID[15]:   uint8_t = 140
        limits:   VkPhysicalDeviceLimits = 000001A5A25E95D8:
            maxImageDimension1D:    uint32_t = 32768
            maxImageDimension2D:    uint32_t = 32768
            maxImageDimension3D:    uint32_t = 16384
            maxImageDimensionCube:  uint32_t = 32768
            maxImageArrayLayers:    uint32_t = 2048
            maxTexelBufferElements: uint32_t = 134217728
            maxUniformBufferRange:  uint32_t = 65536
            maxStorageBufferRange:  uint32_t = 4294967295
            maxPushConstantsSize:   uint32_t = 256
            maxMemoryAllocationCount: uint32_t = 4096
            maxSamplerAllocationCount: uint32_t = 4000
            bufferImageGranularity: VkDeviceSize = 1024
            sparseAddressSpaceSize: VkDeviceSize = 1099511627775
            maxBoundDescriptorSets: uint32_t = 32
            maxPerStageDescriptorSamplers: uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:   uint32_t = 4294967295
            maxDescriptorSetSamplers: uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages: uint32_t = 1048576
            maxDescriptorSetStorageImages: uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes: uint32_t = 32
            maxVertexInputBindings: uint32_t = 32
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 2048
            maxVertexOutputComponents: uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations: uint32_t = 32
            maxGeometryInputComponents: uint32_t = 128
            maxGeometryOutputComponents: uint32_t = 128
            maxGeometryOutputVertices: uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents: uint32_t = 128
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize: uint32_t = 49152
            maxComputeWorkGroupCount: uint32_t[3] = 000001A5A25E96B4
                maxComputeWorkGroupCount[0]: uint32_t = 2147483647
                maxComputeWorkGroupCount[1]: uint32_t = 65535
                maxComputeWorkGroupCount[2]: uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 000001A5A25E96C4
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 64
            subPixelPrecisionBits:  uint32_t = 8
            subTexelPrecisionBits:  uint32_t = 8
            mipmapPrecisionBits:    uint32_t = 8
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount:   uint32_t = 4294967295
            maxSamplerLodBias:         float = 15
            maxSamplerAnisotropy:      float = 16
            maxViewports:           uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 000001A5A25E96F0
                maxViewportDimensions[0]: uint32_t = 32768
                maxViewportDimensions[1]: uint32_t = 32768
            viewportBoundsRange:    float[2] = 000001A5A25E96F8
                viewportBoundsRange[0]:    float = -65536
                viewportBoundsRange[1]:    float = 65536
            viewportSubPixelBits:   uint32_t = 8
            minMemoryMapAlignment:    size_t = 64
            minTexelBufferOffsetAlignment: VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:          int32_t = -8
            maxTexelOffset:         uint32_t = 7
            minTexelGatherOffset:    int32_t = -32
            maxTexelGatherOffset:   uint32_t = 31
            minInterpolationOffset:    float = -0.5
            maxInterpolationOffset:    float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:    uint32_t = 32768
            maxFramebufferHeight:   uint32_t = 32768
            maxFramebufferLayers:   uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:    uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:     uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod:           float = 1
            maxClipDistances:       uint32_t = 8
            maxCullDistances:       uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange:         float[2] = 000001A5A25E9794
                pointSizeRange[0]:         float = 1
                pointSizeRange[1]:         float = 2047.94
            lineWidthRange:         float[2] = 000001A5A25E979C
                lineWidthRange[0]:         float = 1
                lineWidthRange[1]:         float = 64
            pointSizeGranularity:      float = 0.0625
            lineWidthGranularity:      float = 0.0625
            strictLines:            VkBool32 = 1
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize: VkDeviceSize = 64
        sparseProperties: VkPhysicalDeviceSparseProperties = 000001A5A25E97D0:
            residencyStandard2DBlockShape: VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape: VkBool32 = 1
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 1

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = 000001A5A16923B0
        pPhysicalDevices[0]: VkPhysicalDevice = 000001A5A2346D80
        pPhysicalDevices[1]: VkPhysicalDevice = 000001A5A2346750

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pProperties: VkPhysicalDeviceProperties* = 00000047B9FEE3C0:
        apiVersion:             uint32_t = 4206807
        driverVersion:          uint32_t = 1657895
        vendorID:               uint32_t = 32902
        deviceID:               uint32_t = 39497
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) Iris(R) Xe Graphics"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 00000047B9FEE4D4
            pipelineCacheUUID[0]:    uint8_t = 22
            pipelineCacheUUID[1]:    uint8_t = 59
            pipelineCacheUUID[2]:    uint8_t = 18
            pipelineCacheUUID[3]:    uint8_t = 57
            pipelineCacheUUID[4]:    uint8_t = 17
            pipelineCacheUUID[5]:    uint8_t = 50
            pipelineCacheUUID[6]:    uint8_t = 33
            pipelineCacheUUID[7]:    uint8_t = 54
            pipelineCacheUUID[8]:    uint8_t = 31
            pipelineCacheUUID[9]:    uint8_t = 59
            pipelineCacheUUID[10]:   uint8_t = 29
            pipelineCacheUUID[11]:   uint8_t = 53
            pipelineCacheUUID[12]:   uint8_t = 26
            pipelineCacheUUID[13]:   uint8_t = 49
            pipelineCacheUUID[14]:   uint8_t = 24
            pipelineCacheUUID[15]:   uint8_t = 0
        limits:   VkPhysicalDeviceLimits = 00000047B9FEE4E8:
            maxImageDimension1D:    uint32_t = 16384
            maxImageDimension2D:    uint32_t = 16384
            maxImageDimension3D:    uint32_t = 2048
            maxImageDimensionCube:  uint32_t = 16384
            maxImageArrayLayers:    uint32_t = 2048
            maxTexelBufferElements: uint32_t = 134217728
            maxUniformBufferRange:  uint32_t = 134217724
            maxStorageBufferRange:  uint32_t = 1073741820
            maxPushConstantsSize:   uint32_t = 256
            maxMemoryAllocationCount: uint32_t = 2090411
            maxSamplerAllocationCount: uint32_t = 4000
            bufferImageGranularity: VkDeviceSize = 1
            sparseAddressSpaceSize: VkDeviceSize = 17523466567680
            maxBoundDescriptorSets: uint32_t = 32
            maxPerStageDescriptorSamplers: uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 7
            maxPerStageResources:   uint32_t = 200
            maxDescriptorSetSamplers: uint32_t = 576
            maxDescriptorSetUniformBuffers: uint32_t = 1800
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1800
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages: uint32_t = 1800
            maxDescriptorSetStorageImages: uint32_t = 144
            maxDescriptorSetInputAttachments: uint32_t = 7
            maxVertexInputAttributes: uint32_t = 32
            maxVertexInputBindings: uint32_t = 32
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 4095
            maxVertexOutputComponents: uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations: uint32_t = 32
            maxGeometryInputComponents: uint32_t = 128
            maxGeometryOutputComponents: uint32_t = 128
            maxGeometryOutputVertices: uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents: uint32_t = 128
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize: uint32_t = 32768
            maxComputeWorkGroupCount: uint32_t[3] = 00000047B9FEE5C4
                maxComputeWorkGroupCount[0]: uint32_t = 65536
                maxComputeWorkGroupCount[1]: uint32_t = 65536
                maxComputeWorkGroupCount[2]: uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 00000047B9FEE5D4
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 64
            subPixelPrecisionBits:  uint32_t = 8
            subTexelPrecisionBits:  uint32_t = 8
            mipmapPrecisionBits:    uint32_t = 8
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount:   uint32_t = 4294967295
            maxSamplerLodBias:         float = 16
            maxSamplerAnisotropy:      float = 16
            maxViewports:           uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 00000047B9FEE600
                maxViewportDimensions[0]: uint32_t = 32768
                maxViewportDimensions[1]: uint32_t = 32768
            viewportBoundsRange:    float[2] = 00000047B9FEE608
                viewportBoundsRange[0]:    float = -65536
                viewportBoundsRange[1]:    float = 65535
            viewportSubPixelBits:   uint32_t = 8
            minMemoryMapAlignment:    size_t = 64
            minTexelBufferOffsetAlignment: VkDeviceSize = 64
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 64
            minTexelOffset:          int32_t = -8
            maxTexelOffset:         uint32_t = 7
            minTexelGatherOffset:    int32_t = -32
            maxTexelGatherOffset:   uint32_t = 31
            minInterpolationOffset:    float = -0.5
            maxInterpolationOffset:    float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:    uint32_t = 16384
            maxFramebufferHeight:   uint32_t = 16384
            maxFramebufferLayers:   uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:    uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:     uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod:           float = 52.0833
            maxClipDistances:       uint32_t = 8
            maxCullDistances:       uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange:         float[2] = 00000047B9FEE6A4
                pointSizeRange[0]:         float = 0.125
                pointSizeRange[1]:         float = 255.875
            lineWidthRange:         float[2] = 00000047B9FEE6AC
                lineWidthRange[0]:         float = 0
                lineWidthRange[1]:         float = 7.99219
            pointSizeGranularity:      float = 0.125
            lineWidthGranularity:      float = 0.0078125
            strictLines:            VkBool32 = 0
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 64
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64
            nonCoherentAtomSize: VkDeviceSize = 1
        sparseProperties: VkPhysicalDeviceSparseProperties = 00000047B9FEE6E0:
            residencyStandard2DBlockShape: VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape: VkBool32 = 1
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 00000047B9FEE720:
        memoryTypeCount:        uint32_t = 3
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000047B9FEE724
            memoryTypes[0]:     VkMemoryType = 00000047B9FEE724:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[1]:     VkMemoryType = 00000047B9FEE72C:
                propertyFlags: VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[2]:     VkMemoryType = 00000047B9FEE734:
                propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:              uint32_t = 0
        memoryHeapCount:        uint32_t = 1
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000047B9FEE828
            memoryHeaps[0]:     VkMemoryHeap = 00000047B9FEE828:
                size:               VkDeviceSize = 8428105728
                flags:         VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = 000001A5A16923B0
        pPhysicalDevices[0]: VkPhysicalDevice = 000001A5A2346D80
        pPhysicalDevices[1]: VkPhysicalDevice = 000001A5A2346750

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = 000001A5A1692170
        pPhysicalDevices[0]: VkPhysicalDevice = 000001A5A2346D80
        pPhysicalDevices[1]: VkPhysicalDevice = 000001A5A2346750

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = 000001A5A1692170
        pPhysicalDevices[0]: VkPhysicalDevice = 000001A5A2346D80
        pPhysicalDevices[1]: VkPhysicalDevice = 000001A5A2346750

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pProperties: VkPhysicalDeviceProperties* = 00000047B9FEE3C0:
        apiVersion:             uint32_t = 4206807
        driverVersion:          uint32_t = 1657895
        vendorID:               uint32_t = 32902
        deviceID:               uint32_t = 39497
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) Iris(R) Xe Graphics"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 00000047B9FEE4D4
            pipelineCacheUUID[0]:    uint8_t = 22
            pipelineCacheUUID[1]:    uint8_t = 59
            pipelineCacheUUID[2]:    uint8_t = 18
            pipelineCacheUUID[3]:    uint8_t = 57
            pipelineCacheUUID[4]:    uint8_t = 17
            pipelineCacheUUID[5]:    uint8_t = 50
            pipelineCacheUUID[6]:    uint8_t = 33
            pipelineCacheUUID[7]:    uint8_t = 54
            pipelineCacheUUID[8]:    uint8_t = 31
            pipelineCacheUUID[9]:    uint8_t = 59
            pipelineCacheUUID[10]:   uint8_t = 29
            pipelineCacheUUID[11]:   uint8_t = 53
            pipelineCacheUUID[12]:   uint8_t = 26
            pipelineCacheUUID[13]:   uint8_t = 49
            pipelineCacheUUID[14]:   uint8_t = 24
            pipelineCacheUUID[15]:   uint8_t = 0
        limits:   VkPhysicalDeviceLimits = 00000047B9FEE4E8:
            maxImageDimension1D:    uint32_t = 16384
            maxImageDimension2D:    uint32_t = 16384
            maxImageDimension3D:    uint32_t = 2048
            maxImageDimensionCube:  uint32_t = 16384
            maxImageArrayLayers:    uint32_t = 2048
            maxTexelBufferElements: uint32_t = 134217728
            maxUniformBufferRange:  uint32_t = 134217724
            maxStorageBufferRange:  uint32_t = 1073741820
            maxPushConstantsSize:   uint32_t = 256
            maxMemoryAllocationCount: uint32_t = 2090411
            maxSamplerAllocationCount: uint32_t = 4000
            bufferImageGranularity: VkDeviceSize = 1
            sparseAddressSpaceSize: VkDeviceSize = 17523466567680
            maxBoundDescriptorSets: uint32_t = 32
            maxPerStageDescriptorSamplers: uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 7
            maxPerStageResources:   uint32_t = 200
            maxDescriptorSetSamplers: uint32_t = 576
            maxDescriptorSetUniformBuffers: uint32_t = 1800
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1800
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages: uint32_t = 1800
            maxDescriptorSetStorageImages: uint32_t = 144
            maxDescriptorSetInputAttachments: uint32_t = 7
            maxVertexInputAttributes: uint32_t = 32
            maxVertexInputBindings: uint32_t = 32
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 4095
            maxVertexOutputComponents: uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations: uint32_t = 32
            maxGeometryInputComponents: uint32_t = 128
            maxGeometryOutputComponents: uint32_t = 128
            maxGeometryOutputVertices: uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents: uint32_t = 128
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize: uint32_t = 32768
            maxComputeWorkGroupCount: uint32_t[3] = 00000047B9FEE5C4
                maxComputeWorkGroupCount[0]: uint32_t = 65536
                maxComputeWorkGroupCount[1]: uint32_t = 65536
                maxComputeWorkGroupCount[2]: uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 00000047B9FEE5D4
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 64
            subPixelPrecisionBits:  uint32_t = 8
            subTexelPrecisionBits:  uint32_t = 8
            mipmapPrecisionBits:    uint32_t = 8
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount:   uint32_t = 4294967295
            maxSamplerLodBias:         float = 16
            maxSamplerAnisotropy:      float = 16
            maxViewports:           uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 00000047B9FEE600
                maxViewportDimensions[0]: uint32_t = 32768
                maxViewportDimensions[1]: uint32_t = 32768
            viewportBoundsRange:    float[2] = 00000047B9FEE608
                viewportBoundsRange[0]:    float = -65536
                viewportBoundsRange[1]:    float = 65535
            viewportSubPixelBits:   uint32_t = 8
            minMemoryMapAlignment:    size_t = 64
            minTexelBufferOffsetAlignment: VkDeviceSize = 64
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 64
            minTexelOffset:          int32_t = -8
            maxTexelOffset:         uint32_t = 7
            minTexelGatherOffset:    int32_t = -32
            maxTexelGatherOffset:   uint32_t = 31
            minInterpolationOffset:    float = -0.5
            maxInterpolationOffset:    float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:    uint32_t = 16384
            maxFramebufferHeight:   uint32_t = 16384
            maxFramebufferLayers:   uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:    uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:     uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod:           float = 52.0833
            maxClipDistances:       uint32_t = 8
            maxCullDistances:       uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange:         float[2] = 00000047B9FEE6A4
                pointSizeRange[0]:         float = 0.125
                pointSizeRange[1]:         float = 255.875
            lineWidthRange:         float[2] = 00000047B9FEE6AC
                lineWidthRange[0]:         float = 0
                lineWidthRange[1]:         float = 7.99219
            pointSizeGranularity:      float = 0.125
            lineWidthGranularity:      float = 0.0078125
            strictLines:            VkBool32 = 0
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 64
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64
            nonCoherentAtomSize: VkDeviceSize = 1
        sparseProperties: VkPhysicalDeviceSparseProperties = 00000047B9FEE6E0:
            residencyStandard2DBlockShape: VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape: VkBool32 = 1
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 00000047B9FEE720:
        memoryTypeCount:        uint32_t = 3
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000047B9FEE724
            memoryTypes[0]:     VkMemoryType = 00000047B9FEE724:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[1]:     VkMemoryType = 00000047B9FEE72C:
                propertyFlags: VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[2]:     VkMemoryType = 00000047B9FEE734:
                propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:              uint32_t = 0
        memoryHeapCount:        uint32_t = 1
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000047B9FEE828
            memoryHeaps[0]:     VkMemoryHeap = 00000047B9FEE828:
                size:               VkDeviceSize = 8428105728
                flags:         VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = 000001A5A1692170
        pPhysicalDevices[0]: VkPhysicalDevice = 000001A5A2346D80
        pPhysicalDevices[1]: VkPhysicalDevice = 000001A5A2346750

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = NULL

Thread 0, Frame 0:
vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pPhysicalDeviceCount:  uint32_t* = 2
    pPhysicalDevices: VkPhysicalDevice* = 000001A5A1692170
        pPhysicalDevices[0]: VkPhysicalDevice = 000001A5A2346D80
        pPhysicalDevices[1]: VkPhysicalDevice = 000001A5A2346750

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346750
    pProperties: VkPhysicalDeviceProperties* = 00000047B9FEE3C0:
        apiVersion:             uint32_t = 4206852
        driverVersion:          uint32_t = 2290368512
        vendorID:               uint32_t = 4318
        deviceID:               uint32_t = 9634
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU (2)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "NVIDIA GeForce RTX 3050 Laptop GPU"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 00000047B9FEE4D4
            pipelineCacheUUID[0]:    uint8_t = 41
            pipelineCacheUUID[1]:    uint8_t = 189
            pipelineCacheUUID[2]:    uint8_t = 0
            pipelineCacheUUID[3]:    uint8_t = 70
            pipelineCacheUUID[4]:    uint8_t = 26
            pipelineCacheUUID[5]:    uint8_t = 200
            pipelineCacheUUID[6]:    uint8_t = 238
            pipelineCacheUUID[7]:    uint8_t = 247
            pipelineCacheUUID[8]:    uint8_t = 242
            pipelineCacheUUID[9]:    uint8_t = 138
            pipelineCacheUUID[10]:   uint8_t = 158
            pipelineCacheUUID[11]:   uint8_t = 47
            pipelineCacheUUID[12]:   uint8_t = 8
            pipelineCacheUUID[13]:   uint8_t = 89
            pipelineCacheUUID[14]:   uint8_t = 160
            pipelineCacheUUID[15]:   uint8_t = 140
        limits:   VkPhysicalDeviceLimits = 00000047B9FEE4E8:
            maxImageDimension1D:    uint32_t = 32768
            maxImageDimension2D:    uint32_t = 32768
            maxImageDimension3D:    uint32_t = 16384
            maxImageDimensionCube:  uint32_t = 32768
            maxImageArrayLayers:    uint32_t = 2048
            maxTexelBufferElements: uint32_t = 134217728
            maxUniformBufferRange:  uint32_t = 65536
            maxStorageBufferRange:  uint32_t = 4294967295
            maxPushConstantsSize:   uint32_t = 256
            maxMemoryAllocationCount: uint32_t = 4096
            maxSamplerAllocationCount: uint32_t = 4000
            bufferImageGranularity: VkDeviceSize = 1024
            sparseAddressSpaceSize: VkDeviceSize = 1099511627775
            maxBoundDescriptorSets: uint32_t = 32
            maxPerStageDescriptorSamplers: uint32_t = 1048576
            maxPerStageDescriptorUniformBuffers: uint32_t = 1048576
            maxPerStageDescriptorStorageBuffers: uint32_t = 1048576
            maxPerStageDescriptorSampledImages: uint32_t = 1048576
            maxPerStageDescriptorStorageImages: uint32_t = 1048576
            maxPerStageDescriptorInputAttachments: uint32_t = 1048576
            maxPerStageResources:   uint32_t = 4294967295
            maxDescriptorSetSamplers: uint32_t = 1048576
            maxDescriptorSetUniformBuffers: uint32_t = 1048576
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 15
            maxDescriptorSetStorageBuffers: uint32_t = 1048576
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages: uint32_t = 1048576
            maxDescriptorSetStorageImages: uint32_t = 1048576
            maxDescriptorSetInputAttachments: uint32_t = 1048576
            maxVertexInputAttributes: uint32_t = 32
            maxVertexInputBindings: uint32_t = 32
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 2048
            maxVertexOutputComponents: uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4216
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations: uint32_t = 32
            maxGeometryInputComponents: uint32_t = 128
            maxGeometryOutputComponents: uint32_t = 128
            maxGeometryOutputVertices: uint32_t = 1024
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents: uint32_t = 128
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 4294967295
            maxComputeSharedMemorySize: uint32_t = 49152
            maxComputeWorkGroupCount: uint32_t[3] = 00000047B9FEE5C4
                maxComputeWorkGroupCount[0]: uint32_t = 2147483647
                maxComputeWorkGroupCount[1]: uint32_t = 65535
                maxComputeWorkGroupCount[2]: uint32_t = 65535
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 00000047B9FEE5D4
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 64
            subPixelPrecisionBits:  uint32_t = 8
            subTexelPrecisionBits:  uint32_t = 8
            mipmapPrecisionBits:    uint32_t = 8
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount:   uint32_t = 4294967295
            maxSamplerLodBias:         float = 15
            maxSamplerAnisotropy:      float = 16
            maxViewports:           uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 00000047B9FEE600
                maxViewportDimensions[0]: uint32_t = 32768
                maxViewportDimensions[1]: uint32_t = 32768
            viewportBoundsRange:    float[2] = 00000047B9FEE608
                viewportBoundsRange[0]:    float = -65536
                viewportBoundsRange[1]:    float = 65536
            viewportSubPixelBits:   uint32_t = 8
            minMemoryMapAlignment:    size_t = 64
            minTexelBufferOffsetAlignment: VkDeviceSize = 16
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 16
            minTexelOffset:          int32_t = -8
            maxTexelOffset:         uint32_t = 7
            minTexelGatherOffset:    int32_t = -32
            maxTexelGatherOffset:   uint32_t = 31
            minInterpolationOffset:    float = -0.5
            maxInterpolationOffset:    float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:    uint32_t = 32768
            maxFramebufferHeight:   uint32_t = 32768
            maxFramebufferLayers:   uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:    uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 15 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT)
            maxSampleMaskWords:     uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod:           float = 1
            maxClipDistances:       uint32_t = 8
            maxCullDistances:       uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange:         float[2] = 00000047B9FEE6A4
                pointSizeRange[0]:         float = 1
                pointSizeRange[1]:         float = 2047.94
            lineWidthRange:         float[2] = 00000047B9FEE6AC
                lineWidthRange[0]:         float = 1
                lineWidthRange[1]:         float = 64
            pointSizeGranularity:      float = 0.0625
            lineWidthGranularity:      float = 0.0625
            strictLines:            VkBool32 = 1
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 1
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 1
            nonCoherentAtomSize: VkDeviceSize = 64
        sparseProperties: VkPhysicalDeviceSparseProperties = 00000047B9FEE6E0:
            residencyStandard2DBlockShape: VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape: VkBool32 = 1
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346750
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 00000047B9FEE720:
        memoryTypeCount:        uint32_t = 5
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000047B9FEE724
            memoryTypes[0]:     VkMemoryType = 00000047B9FEE724:
                propertyFlags: VkMemoryPropertyFlags = 0
                heapIndex:              uint32_t = 1
            memoryTypes[1]:     VkMemoryType = 00000047B9FEE72C:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[2]:     VkMemoryType = 00000047B9FEE734:
                propertyFlags: VkMemoryPropertyFlags = 6 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 1
            memoryTypes[3]:     VkMemoryType = 00000047B9FEE73C:
                propertyFlags: VkMemoryPropertyFlags = 14 (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:              uint32_t = 1
            memoryTypes[4]:     VkMemoryType = 00000047B9FEE744:
                propertyFlags: VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 0
        memoryHeapCount:        uint32_t = 2
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000047B9FEE828
            memoryHeaps[0]:     VkMemoryHeap = 00000047B9FEE828:
                size:               VkDeviceSize = 4170186752
                flags:         VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)
            memoryHeaps[1]:     VkMemoryHeap = 00000047B9FEE838:
                size:               VkDeviceSize = 8428105728
                flags:         VkMemoryHeapFlags = 0

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 00000047B9FEDE20:
        memoryTypeCount:        uint32_t = 3
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000047B9FEDE24
            memoryTypes[0]:     VkMemoryType = 00000047B9FEDE24:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[1]:     VkMemoryType = 00000047B9FEDE2C:
                propertyFlags: VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[2]:     VkMemoryType = 00000047B9FEDE34:
                propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:              uint32_t = 0
        memoryHeapCount:        uint32_t = 1
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000047B9FEDF28
            memoryHeaps[0]:     VkMemoryHeap = 00000047B9FEDF28:
                size:               VkDeviceSize = 8428105728
                flags:         VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pQueueFamilyPropertyCount: uint32_t* = 1
    pQueueFamilyProperties: VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pQueueFamilyPropertyCount: uint32_t* = 1
    pQueueFamilyProperties: VkQueueFamilyProperties* = 000001A5A12ED830
        pQueueFamilyProperties[0]: VkQueueFamilyProperties = 000001A5A12ED830:
            queueFlags:         VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:             uint32_t = 1
            timestampValidBits:     uint32_t = 36
            minImageTransferGranularity: VkExtent3D = 000001A5A12ED83C:
                width:                  uint32_t = 1
                height:                 uint32_t = 1
                depth:                  uint32_t = 1

Thread 0, Frame 0:
vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pCreateInfo: const VkDeviceCreateInfo* = 00000047B9FEDC50:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (3)
        pNext:               const void* = NULL
        flags:       VkDeviceCreateFlags = 0
        queueCreateInfoCount:   uint32_t = 1
        pQueueCreateInfos: const VkDeviceQueueCreateInfo* = 000001A5A206F7E0
            pQueueCreateInfos[0]: const VkDeviceQueueCreateInfo = 000001A5A206F7E0:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (2)
                pNext:               const void* = NULL
                flags:  VkDeviceQueueCreateFlags = 0
                queueFamilyIndex:       uint32_t = 0
                queueCount:             uint32_t = 1
                pQueuePriorities:   const float* = 00000047B9FEE284
                    pQueuePriorities[0]: const float = 1
        enabledLayerCount:      uint32_t = 0
        ppEnabledLayerNames: const char* const* = NULL
        enabledExtensionCount:  uint32_t = 11
        ppEnabledExtensionNames: const char* const* = 00000047B9FEE500
            ppEnabledExtensionNames[0]: const char* const = "VK_KHR_swapchain"
            ppEnabledExtensionNames[1]: const char* const = "VK_KHR_timeline_semaphore"
            ppEnabledExtensionNames[2]: const char* const = "VK_KHR_dynamic_rendering"
            ppEnabledExtensionNames[3]: const char* const = "VK_KHR_depth_stencil_resolve"
            ppEnabledExtensionNames[4]: const char* const = "VK_KHR_create_renderpass2"
            ppEnabledExtensionNames[5]: const char* const = "VK_KHR_maintenance4"
            ppEnabledExtensionNames[6]: const char* const = "VK_KHR_maintenance1"
            ppEnabledExtensionNames[7]: const char* const = "VK_KHR_shader_non_semantic_info"
            ppEnabledExtensionNames[8]: const char* const = "VK_KHR_format_feature_flags2"
            ppEnabledExtensionNames[9]: const char* const = "VK_KHR_external_memory"
            ppEnabledExtensionNames[10]: const char* const = "VK_KHR_external_memory_win32"
        pEnabledFeatures: const VkPhysicalDeviceFeatures* = 00000047B9FEE330:
            robustBufferAccess:     VkBool32 = 0
            fullDrawIndexUint32:    VkBool32 = 0
            imageCubeArray:         VkBool32 = 0
            independentBlend:       VkBool32 = 0
            geometryShader:         VkBool32 = 0
            tessellationShader:     VkBool32 = 0
            sampleRateShading:      VkBool32 = 0
            dualSrcBlend:           VkBool32 = 0
            logicOp:                VkBool32 = 0
            multiDrawIndirect:      VkBool32 = 0
            drawIndirectFirstInstance: VkBool32 = 0
            depthClamp:             VkBool32 = 0
            depthBiasClamp:         VkBool32 = 0
            fillModeNonSolid:       VkBool32 = 0
            depthBounds:            VkBool32 = 0
            wideLines:              VkBool32 = 0
            largePoints:            VkBool32 = 0
            alphaToOne:             VkBool32 = 0
            multiViewport:          VkBool32 = 0
            samplerAnisotropy:      VkBool32 = 0
            textureCompressionETC2: VkBool32 = 0
            textureCompressionASTC_LDR: VkBool32 = 0
            textureCompressionBC:   VkBool32 = 0
            occlusionQueryPrecise:  VkBool32 = 0
            pipelineStatisticsQuery: VkBool32 = 0
            vertexPipelineStoresAndAtomics: VkBool32 = 0
            fragmentStoresAndAtomics: VkBool32 = 0
            shaderTessellationAndGeometryPointSize: VkBool32 = 0
            shaderImageGatherExtended: VkBool32 = 0
            shaderStorageImageExtendedFormats: VkBool32 = 0
            shaderStorageImageMultisample: VkBool32 = 0
            shaderStorageImageReadWithoutFormat: VkBool32 = 0
            shaderStorageImageWriteWithoutFormat: VkBool32 = 0
            shaderUniformBufferArrayDynamicIndexing: VkBool32 = 0
            shaderSampledImageArrayDynamicIndexing: VkBool32 = 0
            shaderStorageBufferArrayDynamicIndexing: VkBool32 = 0
            shaderStorageImageArrayDynamicIndexing: VkBool32 = 0
            shaderClipDistance:     VkBool32 = 0
            shaderCullDistance:     VkBool32 = 0
            shaderFloat64:          VkBool32 = 0
            shaderInt64:            VkBool32 = 0
            shaderInt16:            VkBool32 = 0
            shaderResourceResidency: VkBool32 = 0
            shaderResourceMinLod:   VkBool32 = 0
            sparseBinding:          VkBool32 = 0
            sparseResidencyBuffer:  VkBool32 = 0
            sparseResidencyImage2D: VkBool32 = 0
            sparseResidencyImage3D: VkBool32 = 0
            sparseResidency2Samples: VkBool32 = 0
            sparseResidency4Samples: VkBool32 = 0
            sparseResidency8Samples: VkBool32 = 0
            sparseResidency16Samples: VkBool32 = 0
            sparseResidencyAliased: VkBool32 = 0
            variableMultisampleRate: VkBool32 = 0
            inheritedQueries:       VkBool32 = 0
        pNext: VkPhysicalDeviceTimelineSemaphoreFeatures = 00000047B9FEE458:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES (1000207000)
            pNext:               const void* = VkPhysicalDeviceDynamicRenderingFeatures
            timelineSemaphore:      VkBool32 = 1
        pNext: VkPhysicalDeviceDynamicRenderingFeatures = 00000047B9FEE428:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES (1000044003)
            pNext:                     void* = NULL
            dynamicRendering:       VkBool32 = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pDevice:               VkDevice* = 000001A5A2365D98

Thread 0, Frame 0:
vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) returns VkResult VK_ERROR_FORMAT_NOT_SUPPORTED (-11):
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pImageFormatInfo: const VkPhysicalDeviceImageFormatInfo2* = 00000047B9FED300:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (1000059004)
        pNext:               const void* = VkPhysicalDeviceExternalImageFormatInfo
        format:                 VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        type:                VkImageType = VK_IMAGE_TYPE_2D (1)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        flags:        VkImageCreateFlags = 0
        pNext: VkPhysicalDeviceExternalImageFormatInfo = 00000047B9FED328:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (1000071000)
            pNext:               const void* = NULL
            handleType: VkExternalMemoryHandleTypeFlagBits = 16 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT)
    pImageFormatProperties: VkImageFormatProperties2* = 00000047B9FED360:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (1000059003)
        pNext:               const void* = VkExternalImageFormatProperties
        imageFormatProperties: VkImageFormatProperties = 00000047B9FED370:
            maxExtent:            VkExtent3D = 00000047B9FED370:
                width:                  uint32_t = 16384
                height:                 uint32_t = 16384
                depth:                  uint32_t = 1
            maxMipLevels:           uint32_t = 15
            maxArrayLayers:         uint32_t = 2048
            sampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxResourceSize:    VkDeviceSize = 1099511627776
        pNext: VkExternalImageFormatProperties = 00000047B9FED340:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (1000071001)
            pNext:                     void* = NULL
            externalMemoryProperties: VkExternalMemoryProperties = 00000047B9FED350:
                externalMemoryFeatures: VkExternalMemoryFeatureFlags = 0
                exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags = 0
                compatibleHandleTypes: VkExternalMemoryHandleTypeFlags = 394 (VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT | VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT | VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT | VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT)

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                 VkDevice = 000001A5A2365D98
    queueFamilyIndex:       uint32_t = 0
    queueIndex:             uint32_t = 0
    pQueue:                 VkQueue* = 000001A5A23D1898

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                 VkDevice = 000001A5A2365D98
    queueFamilyIndex:       uint32_t = 0
    queueIndex:             uint32_t = 0
    pQueue:                 VkQueue* = 000001A5A23D1898

Thread 0, Frame 0:
vkGetPhysicalDeviceProperties(physicalDevice, pProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pProperties: VkPhysicalDeviceProperties* = 000001A5A24655C8:
        apiVersion:             uint32_t = 4206807
        driverVersion:          uint32_t = 1657895
        vendorID:               uint32_t = 32902
        deviceID:               uint32_t = 39497
        deviceType: VkPhysicalDeviceType = VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU (1)
        deviceName: char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] = "Intel(R) Iris(R) Xe Graphics"
        pipelineCacheUUID: uint8_t[VK_UUID_SIZE] = 000001A5A24656DC
            pipelineCacheUUID[0]:    uint8_t = 22
            pipelineCacheUUID[1]:    uint8_t = 59
            pipelineCacheUUID[2]:    uint8_t = 18
            pipelineCacheUUID[3]:    uint8_t = 57
            pipelineCacheUUID[4]:    uint8_t = 17
            pipelineCacheUUID[5]:    uint8_t = 50
            pipelineCacheUUID[6]:    uint8_t = 33
            pipelineCacheUUID[7]:    uint8_t = 54
            pipelineCacheUUID[8]:    uint8_t = 31
            pipelineCacheUUID[9]:    uint8_t = 59
            pipelineCacheUUID[10]:   uint8_t = 29
            pipelineCacheUUID[11]:   uint8_t = 53
            pipelineCacheUUID[12]:   uint8_t = 26
            pipelineCacheUUID[13]:   uint8_t = 49
            pipelineCacheUUID[14]:   uint8_t = 24
            pipelineCacheUUID[15]:   uint8_t = 0
        limits:   VkPhysicalDeviceLimits = 000001A5A24656F0:
            maxImageDimension1D:    uint32_t = 16384
            maxImageDimension2D:    uint32_t = 16384
            maxImageDimension3D:    uint32_t = 2048
            maxImageDimensionCube:  uint32_t = 16384
            maxImageArrayLayers:    uint32_t = 2048
            maxTexelBufferElements: uint32_t = 134217728
            maxUniformBufferRange:  uint32_t = 134217724
            maxStorageBufferRange:  uint32_t = 1073741820
            maxPushConstantsSize:   uint32_t = 256
            maxMemoryAllocationCount: uint32_t = 2090411
            maxSamplerAllocationCount: uint32_t = 4000
            bufferImageGranularity: VkDeviceSize = 1
            sparseAddressSpaceSize: VkDeviceSize = 17523466567680
            maxBoundDescriptorSets: uint32_t = 32
            maxPerStageDescriptorSamplers: uint32_t = 64
            maxPerStageDescriptorUniformBuffers: uint32_t = 200
            maxPerStageDescriptorStorageBuffers: uint32_t = 200
            maxPerStageDescriptorSampledImages: uint32_t = 200
            maxPerStageDescriptorStorageImages: uint32_t = 16
            maxPerStageDescriptorInputAttachments: uint32_t = 7
            maxPerStageResources:   uint32_t = 200
            maxDescriptorSetSamplers: uint32_t = 576
            maxDescriptorSetUniformBuffers: uint32_t = 1800
            maxDescriptorSetUniformBuffersDynamic: uint32_t = 16
            maxDescriptorSetStorageBuffers: uint32_t = 1800
            maxDescriptorSetStorageBuffersDynamic: uint32_t = 16
            maxDescriptorSetSampledImages: uint32_t = 1800
            maxDescriptorSetStorageImages: uint32_t = 144
            maxDescriptorSetInputAttachments: uint32_t = 7
            maxVertexInputAttributes: uint32_t = 32
            maxVertexInputBindings: uint32_t = 32
            maxVertexInputAttributeOffset: uint32_t = 2047
            maxVertexInputBindingStride: uint32_t = 4095
            maxVertexOutputComponents: uint32_t = 128
            maxTessellationGenerationLevel: uint32_t = 64
            maxTessellationPatchSize: uint32_t = 32
            maxTessellationControlPerVertexInputComponents: uint32_t = 128
            maxTessellationControlPerVertexOutputComponents: uint32_t = 128
            maxTessellationControlPerPatchOutputComponents: uint32_t = 120
            maxTessellationControlTotalOutputComponents: uint32_t = 4096
            maxTessellationEvaluationInputComponents: uint32_t = 128
            maxTessellationEvaluationOutputComponents: uint32_t = 128
            maxGeometryShaderInvocations: uint32_t = 32
            maxGeometryInputComponents: uint32_t = 128
            maxGeometryOutputComponents: uint32_t = 128
            maxGeometryOutputVertices: uint32_t = 256
            maxGeometryTotalOutputComponents: uint32_t = 1024
            maxFragmentInputComponents: uint32_t = 128
            maxFragmentOutputAttachments: uint32_t = 8
            maxFragmentDualSrcAttachments: uint32_t = 1
            maxFragmentCombinedOutputResources: uint32_t = 16
            maxComputeSharedMemorySize: uint32_t = 32768
            maxComputeWorkGroupCount: uint32_t[3] = 000001A5A24657CC
                maxComputeWorkGroupCount[0]: uint32_t = 65536
                maxComputeWorkGroupCount[1]: uint32_t = 65536
                maxComputeWorkGroupCount[2]: uint32_t = 65536
            maxComputeWorkGroupInvocations: uint32_t = 1024
            maxComputeWorkGroupSize: uint32_t[3] = 000001A5A24657DC
                maxComputeWorkGroupSize[0]: uint32_t = 1024
                maxComputeWorkGroupSize[1]: uint32_t = 1024
                maxComputeWorkGroupSize[2]: uint32_t = 64
            subPixelPrecisionBits:  uint32_t = 8
            subTexelPrecisionBits:  uint32_t = 8
            mipmapPrecisionBits:    uint32_t = 8
            maxDrawIndexedIndexValue: uint32_t = 4294967295
            maxDrawIndirectCount:   uint32_t = 4294967295
            maxSamplerLodBias:         float = 16
            maxSamplerAnisotropy:      float = 16
            maxViewports:           uint32_t = 16
            maxViewportDimensions: uint32_t[2] = 000001A5A2465808
                maxViewportDimensions[0]: uint32_t = 32768
                maxViewportDimensions[1]: uint32_t = 32768
            viewportBoundsRange:    float[2] = 000001A5A2465810
                viewportBoundsRange[0]:    float = -65536
                viewportBoundsRange[1]:    float = 65535
            viewportSubPixelBits:   uint32_t = 8
            minMemoryMapAlignment:    size_t = 64
            minTexelBufferOffsetAlignment: VkDeviceSize = 64
            minUniformBufferOffsetAlignment: VkDeviceSize = 64
            minStorageBufferOffsetAlignment: VkDeviceSize = 64
            minTexelOffset:          int32_t = -8
            maxTexelOffset:         uint32_t = 7
            minTexelGatherOffset:    int32_t = -32
            maxTexelGatherOffset:   uint32_t = 31
            minInterpolationOffset:    float = -0.5
            maxInterpolationOffset:    float = 0.4375
            subPixelInterpolationOffsetBits: uint32_t = 4
            maxFramebufferWidth:    uint32_t = 16384
            maxFramebufferHeight:   uint32_t = 16384
            maxFramebufferLayers:   uint32_t = 2048
            framebufferColorSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferDepthSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxColorAttachments:    uint32_t = 8
            sampledImageColorSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageIntegerSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageDepthSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            sampledImageStencilSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            storageImageSampleCounts: VkSampleCountFlags = 31 (VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT | VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT)
            maxSampleMaskWords:     uint32_t = 1
            timestampComputeAndGraphics: VkBool32 = 1
            timestampPeriod:           float = 52.0833
            maxClipDistances:       uint32_t = 8
            maxCullDistances:       uint32_t = 8
            maxCombinedClipAndCullDistances: uint32_t = 8
            discreteQueuePriorities: uint32_t = 2
            pointSizeRange:         float[2] = 000001A5A24658AC
                pointSizeRange[0]:         float = 0.125
                pointSizeRange[1]:         float = 255.875
            lineWidthRange:         float[2] = 000001A5A24658B4
                lineWidthRange[0]:         float = 0
                lineWidthRange[1]:         float = 7.99219
            pointSizeGranularity:      float = 0.125
            lineWidthGranularity:      float = 0.0078125
            strictLines:            VkBool32 = 0
            standardSampleLocations: VkBool32 = 1
            optimalBufferCopyOffsetAlignment: VkDeviceSize = 64
            optimalBufferCopyRowPitchAlignment: VkDeviceSize = 64
            nonCoherentAtomSize: VkDeviceSize = 1
        sparseProperties: VkPhysicalDeviceSparseProperties = 000001A5A24658E8:
            residencyStandard2DBlockShape: VkBool32 = 1
            residencyStandard2DMultisampleBlockShape: VkBool32 = 1
            residencyStandard3DBlockShape: VkBool32 = 1
            residencyAlignedMipSize: VkBool32 = 0
            residencyNonResidentStrict: VkBool32 = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 000001A5A2465900:
        memoryTypeCount:        uint32_t = 3
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 000001A5A2465904
            memoryTypes[0]:     VkMemoryType = 000001A5A2465904:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[1]:     VkMemoryType = 000001A5A246590C:
                propertyFlags: VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[2]:     VkMemoryType = 000001A5A2465914:
                propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:              uint32_t = 0
        memoryHeapCount:        uint32_t = 1
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 000001A5A2465A08
            memoryHeaps[0]:     VkMemoryHeap = 000001A5A2465A08:
                size:               VkDeviceSize = 8428105728
                flags:         VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface) returns VkResult VK_SUCCESS (0):
    instance:             VkInstance = 000001A59EB02F90
    pCreateInfo: const VkWin32SurfaceCreateInfoKHR* = 00000047B9FEEA88:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR (1000009000)
        pNext:               const void* = NULL
        flags: VkWin32SurfaceCreateFlagsKHR = 0
        hinstance:             HINSTANCE = 00007FF7516B0000
        hwnd:                       HWND = 0000000000210980
    pAllocator: const VkAllocationCallbacks* = NULL
    pSurface:          VkSurfaceKHR* = FAB64D0000000002

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    surface:            VkSurfaceKHR = FAB64D0000000002
    pSurfaceFormatCount:   uint32_t* = 6
    pSurfaceFormats: VkSurfaceFormatKHR* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    surface:            VkSurfaceKHR = FAB64D0000000002
    pSurfaceFormatCount:   uint32_t* = 6
    pSurfaceFormats: VkSurfaceFormatKHR* = 000001A5A12F8A30
        pSurfaceFormats[0]: VkSurfaceFormatKHR = 000001A5A12F8A30:
            format:                 VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
            colorSpace:      VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[1]: VkSurfaceFormatKHR = 000001A5A12F8A38:
            format:                 VkFormat = VK_FORMAT_B8G8R8A8_SRGB (50)
            colorSpace:      VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[2]: VkSurfaceFormatKHR = 000001A5A12F8A40:
            format:                 VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
            colorSpace:      VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[3]: VkSurfaceFormatKHR = 000001A5A12F8A48:
            format:                 VkFormat = VK_FORMAT_R8G8B8A8_SRGB (43)
            colorSpace:      VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        pSurfaceFormats[4]: VkSurfaceFormatKHR = 000001A5A12F8A50:
            format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
            colorSpace:      VkColorSpaceKHR = VK_COLOR_SPACE_HDR10_ST2084_EXT (1000104008)
        pSurfaceFormats[5]: VkSurfaceFormatKHR = 000001A5A12F8A58:
            format:                 VkFormat = VK_FORMAT_A2R10G10B10_UNORM_PACK32 (58)
            colorSpace:      VkColorSpaceKHR = VK_COLOR_SPACE_HDR10_ST2084_EXT (1000104008)

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pQueueFamilyPropertyCount: uint32_t* = 1
    pQueueFamilyProperties: VkQueueFamilyProperties* = NULL

Thread 0, Frame 0:
vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pQueueFamilyPropertyCount: uint32_t* = 1
    pQueueFamilyProperties: VkQueueFamilyProperties* = 000001A5A12ECC30
        pQueueFamilyProperties[0]: VkQueueFamilyProperties = 000001A5A12ECC30:
            queueFlags:         VkQueueFlags = 15 (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT)
            queueCount:             uint32_t = 1
            timestampValidBits:     uint32_t = 36
            minImageTransferGranularity: VkExtent3D = 000001A5A12ECC3C:
                width:                  uint32_t = 1
                height:                 uint32_t = 1
                depth:                  uint32_t = 1

Thread 0, Frame 0:
vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) returns VkResult VK_SUCCESS (0):
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    queueFamilyIndex:       uint32_t = 0
    surface:            VkSurfaceKHR = FAB64D0000000002
    pSupported:            VkBool32* = 1

Thread 0, Frame 0:
vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkSwapchainCreateInfoKHR* = 00000047B9FEE770:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (1000001000)
        pNext:               const void* = NULL
        flags: VkSwapchainCreateFlagsKHR = 0
        surface:            VkSurfaceKHR = FAB64D0000000002
        minImageCount:          uint32_t = 2
        imageFormat:            VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        imageColorSpace: VkColorSpaceKHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR (0)
        imageExtent:          VkExtent2D = 00000047B9FEE79C:
            width:                  uint32_t = 1296
            height:                 uint32_t = 771
        imageArrayLayers:       uint32_t = 1
        imageUsage:    VkImageUsageFlags = 18 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        imageSharingMode:  VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        preTransform: VkSurfaceTransformFlagBitsKHR = 1 (VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)
        compositeAlpha: VkCompositeAlphaFlagBitsKHR = 1 (VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)
        presentMode:    VkPresentModeKHR = VK_PRESENT_MODE_MAILBOX_KHR (1)
        clipped:                VkBool32 = 1
        oldSwapchain:     VkSwapchainKHR = 0000000000000000
    pAllocator: const VkAllocationCallbacks* = NULL
    pSwapchain:      VkSwapchainKHR* = FA21A40000000003

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkSemaphoreCreateInfo* = 00000047B9FEE928:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:               const void* = NULL
        flags:    VkSemaphoreCreateFlags = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSemaphore:         VkSemaphore* = F56C9B0000000004

Thread 0, Frame 0:
vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) returns void:
    device:                 VkDevice = 000001A5A2365D98
    queueFamilyIndex:       uint32_t = 0
    queueIndex:             uint32_t = 0
    pQueue:                 VkQueue* = 000001A5A23D1898

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_INCOMPLETE (5):
    device:                 VkDevice = 000001A5A2365D98
    swapchain:        VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:  uint32_t* = 1
    pSwapchainImages:       VkImage* = 000001A5A2020610
        pSwapchainImages[0]:     VkImage = E7F79A0000000005

Thread 0, Frame 0:
vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    swapchain:        VkSwapchainKHR = FA21A40000000003
    pSwapchainImageCount:  uint32_t* = 2
    pSwapchainImages:       VkImage* = 000001A5A2020610
        pSwapchainImages[0]:     VkImage = E7F79A0000000005
        pSwapchainImages[1]:     VkImage = F443490000000006

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEEA60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = E7F79A0000000005
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        components:   VkComponentMapping = 00000047B9FEEA88:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEEA98:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = CB3EE80000000007

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEEA60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = F443490000000006
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_B8G8R8A8_UNORM (44)
        components:   VkComponentMapping = 00000047B9FEEA88:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEEA98:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = EAD9370000000008

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE900:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:               VkExtent3D = 00000047B9FEE91C:
            width:                  uint32_t = 1296
            height:                 uint32_t = 771
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = EE647E0000000009

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE900:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:               VkExtent3D = 00000047B9FEE91C:
            width:                  uint32_t = 1296
            height:                 uint32_t = 771
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 32 (VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = CFEF35000000000A

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = CFEF35000000000A
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE738:
        size:               VkDeviceSize = 5111936
        alignment:          VkDeviceSize = 65536
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkMemoryAllocateInfo* = 00000047B9FED748:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:               const void* = NULL
        allocationSize:     VkDeviceSize = 33554432
        memoryTypeIndex:        uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory:         VkDeviceMemory* = EC4BEC000000000B

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = CFEF35000000000A
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEEA60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = CFEF35000000000A
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:   VkComponentMapping = 00000047B9FEEA88:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEEA98:
            aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = E88693000000000C

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkCommandPoolCreateInfo* = 00000047B9FEEA18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:               const void* = NULL
        flags:  VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:       uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pCommandPool:     VkCommandPool* = CAD092000000000D

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkCommandPoolCreateInfo* = 00000047B9FEEA18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:               const void* = NULL
        flags:  VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:       uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pCommandPool:     VkCommandPool* = 967DD1000000000E

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkCommandPoolCreateInfo* = 00000047B9FEEA18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:               const void* = NULL
        flags:  VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:       uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pCommandPool:     VkCommandPool* = E7E6D0000000000F

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkCommandPoolCreateInfo* = 00000047B9FEEA18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:               const void* = NULL
        flags:  VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:       uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pCommandPool:     VkCommandPool* = D5B26F0000000010

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkCommandPoolCreateInfo* = 00000047B9FEEA18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:               const void* = NULL
        flags:  VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:       uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pCommandPool:     VkCommandPool* = 980F360000000011

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkCommandPoolCreateInfo* = 00000047B9FEEA18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:               const void* = NULL
        flags:  VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:       uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pCommandPool:     VkCommandPool* = DCC8FD0000000012

Thread 0, Frame 0:
vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkCommandPoolCreateInfo* = 00000047B9FEEA18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (39)
        pNext:               const void* = NULL
        flags:  VkCommandPoolCreateFlags = 3 (VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT)
        queueFamilyIndex:       uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pCommandPool:     VkCommandPool* = D175B40000000013

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEEA08:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 00000047B9FEEA48
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEEA88:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A73A9F98

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A73A9F98
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEEA48:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEEA08:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 00000047B9FEEA48
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A73B8A48

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkSemaphoreCreateInfo* = 00000047B9FEEA18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:               const void* = VkSemaphoreTypeCreateInfo
        flags:    VkSemaphoreCreateFlags = 0
        pNext: VkSemaphoreTypeCreateInfo = 00000047B9FEE9D8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:               const void* = NULL
            semaphoreType:   VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:           uint64_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSemaphore:         VkSemaphore* = 9FDE6B0000000014

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkSemaphoreCreateInfo* = 00000047B9FEEA18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:               const void* = VkSemaphoreTypeCreateInfo
        flags:    VkSemaphoreCreateFlags = 0
        pNext: VkSemaphoreTypeCreateInfo = 00000047B9FEE9D8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:               const void* = NULL
            semaphoreType:   VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:           uint64_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSemaphore:         VkSemaphore* = DD3A8A0000000015

Thread 0, Frame 0:
vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorPoolCreateInfo* = 00000047B9FEE9E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (33)
        pNext:               const void* = NULL
        flags: VkDescriptorPoolCreateFlags = 0
        maxSets:                uint32_t = 120
        poolSizeCount:          uint32_t = 3
        pPoolSizes: const VkDescriptorPoolSize* = 00000047B9FEE988
            pPoolSizes[0]: const VkDescriptorPoolSize = 00000047B9FEE988:
                type:           VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 40
            pPoolSizes[1]: const VkDescriptorPoolSize = 00000047B9FEE990:
                type:           VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 40
            pPoolSizes[2]: const VkDescriptorPoolSize = 00000047B9FEE998:
                type:           VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 40
    pAllocator: const VkAllocationCallbacks* = NULL
    pDescriptorPool: VkDescriptorPool* = D897D90000000016

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE948:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 83886080
        usage:        VkBufferUsageFlags = 1 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 84C0580000000017

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 84C0580000000017
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE788:
        size:               VkDeviceSize = 83886080
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkMemoryAllocateInfo* = 00000047B9FED7B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:               const void* = NULL
        allocationSize:     VkDeviceSize = 268435456
        memoryTypeIndex:        uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory:         VkDeviceMemory* = D10D270000000018

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 84C0580000000017
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 0

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEEA88:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7204D70
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A73CB0D8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A73CB0D8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEEA48:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73CB0D8
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 1024 (VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC690
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC8E0
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEC8E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = E7F79A0000000005
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC910:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 1024
        usage:        VkBufferUsageFlags = 131 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 27D60E0000000019

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 27D60E0000000019
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE3F8:
        size:               VkDeviceSize = 1024
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 27D60E0000000019
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 5111936

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 1024
        usage:        VkBufferUsageFlags = 67 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 95A125000000001A

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 95A125000000001A
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE3F8:
        size:               VkDeviceSize = 1024
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 95A125000000001A
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 5112960

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 5120
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = CB1C7C000000001B

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = CB1C7C000000001B
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE328:
        size:               VkDeviceSize = 5120
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = CB1C7C000000001B
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83886080

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 512
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 2CFBA2000000001C

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 2CFBA2000000001C
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE328:
        size:               VkDeviceSize = 512
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 2CFBA2000000001C
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83891200

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4D8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 6720
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 908683000000001D

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 908683000000001D
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE318:
        size:               VkDeviceSize = 6720
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 908683000000001D
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 5113984

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEE5A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE578
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE578:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = CFCDA0000000001E

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE628:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE5E8
            pSetLayouts[0]: const VkDescriptorSetLayout = CFCDA0000000001E
    pDescriptorSets: VkDescriptorSet* = 000001A5A73D9590
        pDescriptorSets[0]: VkDescriptorSet = 2E2941000000001F

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE6A0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE6A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 2E2941000000001F
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEE668
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEE668:
                    buffer:                 VkBuffer = CB1C7C000000001B
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 256
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEE5A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE578
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE578:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = AB64DE0000000020

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE628:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE5E8
            pSetLayouts[0]: const VkDescriptorSetLayout = AB64DE0000000020
    pDescriptorSets: VkDescriptorSet* = 000001A5A73D97D0
        pDescriptorSets[0]: VkDescriptorSet = C4F3070000000021

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE6A0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE6A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C4F3070000000021
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEE668
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEE668:
                    buffer:                 VkBuffer = CB1C7C000000001B
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 256
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 5120
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 301E6C0000000022

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 301E6C0000000022
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE328:
        size:               VkDeviceSize = 5120
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 301E6C0000000022
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83891712

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 512
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = A7C5450000000023

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = A7C5450000000023
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE328:
        size:               VkDeviceSize = 512
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = A7C5450000000023
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83896832

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4D8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 6720
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = B991FA0000000024

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = B991FA0000000024
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE318:
        size:               VkDeviceSize = 6720
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = B991FA0000000024
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 5120704

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEE5A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE578
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE578:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 3A6CBB0000000025

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE628:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE5E8
            pSetLayouts[0]: const VkDescriptorSetLayout = 3A6CBB0000000025
    pDescriptorSets: VkDescriptorSet* = 000001A5A73D9B90
        pDescriptorSets[0]: VkDescriptorSet = A2EB680000000026

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE6A0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE6A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = A2EB680000000026
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEE668
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEE668:
                    buffer:                 VkBuffer = 301E6C0000000022
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 256
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEE5A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE578
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE578:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = B097C90000000027

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE628:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE5E8
            pSetLayouts[0]: const VkDescriptorSetLayout = B097C90000000027
    pDescriptorSets: VkDescriptorSet* = 000001A5A73DA010
        pDescriptorSets[0]: VkDescriptorSet = 3FBCD60000000028

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE6A0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE6A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 3FBCD60000000028
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEE668
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEE668:
                    buffer:                 VkBuffer = 301E6C0000000022
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 256
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 5120
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = B9181F0000000029

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = B9181F0000000029
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE328:
        size:               VkDeviceSize = 5120
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = B9181F0000000029
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83897344

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 512
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = BA7514000000002A

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = BA7514000000002A
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE328:
        size:               VkDeviceSize = 512
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = BA7514000000002A
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83902464

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4D8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 6720
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 02E2CD000000002B

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 02E2CD000000002B
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE318:
        size:               VkDeviceSize = 6720
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 02E2CD000000002B
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 5127424

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEE5A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE578
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE578:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = B12FB2000000002C

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE628:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE5E8
            pSetLayouts[0]: const VkDescriptorSetLayout = B12FB2000000002C
    pDescriptorSets: VkDescriptorSet* = 000001A5A73D9710
        pDescriptorSets[0]: VkDescriptorSet = A43473000000002D

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE6A0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE6A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = A43473000000002D
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEE668
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEE668:
                    buffer:                 VkBuffer = B9181F0000000029
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 256
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEE5A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE578
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE578:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 0980B0000000002E

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE628:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE5E8
            pSetLayouts[0]: const VkDescriptorSetLayout = 0980B0000000002E
    pDescriptorSets: VkDescriptorSet* = 000001A5A73D8FF0
        pDescriptorSets[0]: VkDescriptorSet = 4B7DF1000000002F

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE6A0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE6A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 4B7DF1000000002F
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEE668
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEE668:
                    buffer:                 VkBuffer = B9181F0000000029
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 256
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkSamplerCreateInfo* = 00000047B9FEE470:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext:               const void* = NULL
        flags:      VkSamplerCreateFlags = 0
        magFilter:              VkFilter = VK_FILTER_LINEAR (1)
        minFilter:              VkFilter = VK_FILTER_LINEAR (1)
        mipmapMode:  VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR (1)
        addressModeU: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeV: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeW: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        mipLodBias:                float = 0
        anisotropyEnable:       VkBool32 = 0
        maxAnisotropy:             float = 3.43597e+09
        compareEnable:          VkBool32 = 0
        compareOp:           VkCompareOp = UNKNOWN (204)
        minLod:                    float = 0
        maxLod:                    float = 1000
        borderColor:       VkBorderColor = VK_BORDER_COLOR_INT_OPAQUE_BLACK (3)
        unnormalizedCoordinates: VkBool32 = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSampler:             VkSampler* = A21A4E0000000030

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkSamplerCreateInfo* = 00000047B9FEE5A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext:               const void* = NULL
        flags:      VkSamplerCreateFlags = 0
        magFilter:              VkFilter = VK_FILTER_LINEAR (1)
        minFilter:              VkFilter = VK_FILTER_LINEAR (1)
        mipmapMode:  VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR (1)
        addressModeU: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeV: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeW: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        mipLodBias:                float = 0
        anisotropyEnable:       VkBool32 = 0
        maxAnisotropy:             float = 3.43597e+09
        compareEnable:          VkBool32 = 0
        compareOp:           VkCompareOp = UNKNOWN (204)
        minLod:                    float = 0
        maxLod:                    float = 1000
        borderColor:       VkBorderColor = VK_BORDER_COLOR_INT_OPAQUE_BLACK (3)
        unnormalizedCoordinates: VkBool32 = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSampler:             VkSampler* = 0EA7170000000031

Thread 0, Frame 0:
vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkSamplerCreateInfo* = 00000047B9FEE5A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (31)
        pNext:               const void* = NULL
        flags:      VkSamplerCreateFlags = 0
        magFilter:              VkFilter = VK_FILTER_LINEAR (1)
        minFilter:              VkFilter = VK_FILTER_LINEAR (1)
        mipmapMode:  VkSamplerMipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR (1)
        addressModeU: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeV: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        addressModeW: VkSamplerAddressMode = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE (2)
        mipLodBias:                float = 0
        anisotropyEnable:       VkBool32 = 0
        maxAnisotropy:             float = 3.43597e+09
        compareEnable:          VkBool32 = 1
        compareOp:           VkCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL (3)
        minLod:                    float = 0
        maxLod:                    float = 1000
        borderColor:       VkBorderColor = VK_BORDER_COLOR_INT_OPAQUE_BLACK (3)
        unnormalizedCoordinates: VkBool32 = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSampler:             VkSampler* = 4FAC1C0000000032

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEE4D8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 8
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = A808D50000000033

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = A808D50000000033
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE318:
        size:               VkDeviceSize = 64
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = A808D50000000033
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 5134144

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDA10:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDD40
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD40:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 2B424A0000000034

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDA30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 2
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDD40
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD40:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD58:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 4295AB0000000035

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEDFB8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 2
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDF58
            pSetLayouts[0]: const VkDescriptorSetLayout = 2B424A0000000034
            pSetLayouts[1]: const VkDescriptorSetLayout = 4295AB0000000035
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = 9638F80000000036

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED638:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 956
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = 2723BA0000000037

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED638:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 1180
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = 59F7450000000038

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkGraphicsPipelineCreateInfo* = 00000047B9FEDF40
        pCreateInfos[0]: const VkGraphicsPipelineCreateInfo = 00000047B9FEDF40:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:               const void* = VkPipelineRenderingCreateInfo
            flags:     VkPipelineCreateFlags = 0
            stageCount:             uint32_t = 2
            pStages: const VkPipelineShaderStageCreateInfo* = 00000047B9FED900
                pStages[0]: const VkPipelineShaderStageCreateInfo = 00000047B9FED900:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:           VkShaderModule = 2723BA0000000037
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
                pStages[1]: const VkPipelineShaderStageCreateInfo = 00000047B9FED930:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:           VkShaderModule = 59F7450000000038
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
            pVertexInputState: const VkPipelineVertexInputStateCreateInfo* = 00000047B9FEDB78:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:               const void* = NULL
                flags: VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount: uint32_t = 1
                pVertexBindingDescriptions: const VkVertexInputBindingDescription* = 00000047B9FEDAD8
                    pVertexBindingDescriptions[0]: const VkVertexInputBindingDescription = 00000047B9FEDAD8:
                        binding:                uint32_t = 0
                        stride:                 uint32_t = 32
                        inputRate:     VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 3
                pVertexAttributeDescriptions: const VkVertexInputAttributeDescription* = 00000047B9FEDA70
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 00000047B9FEDA70:
                        location:               uint32_t = 0
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 00000047B9FEDA80:
                        location:               uint32_t = 1
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 00000047B9FEDA90:
                        location:               uint32_t = 2
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                 uint32_t = 24
            pInputAssemblyState: const VkPipelineInputAssemblyStateCreateInfo* = 00000047B9FEDBC8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:               const void* = NULL
                flags: VkPipelineInputAssemblyStateCreateFlags = 0
                topology:    VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable: VkBool32 = 0
            pTessellationState: const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState: const VkPipelineViewportStateCreateInfo* = 00000047B9FEDC78:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:               const void* = NULL
                flags: VkPipelineViewportStateCreateFlags = 0
                viewportCount:          uint32_t = 1
                pViewports:    const VkViewport* = UNUSED
                scissorCount:           uint32_t = 1
                pScissors:       const VkRect2D* = UNUSED
            pRasterizationState: const VkPipelineRasterizationStateCreateInfo* = 00000047B9FEDCD0:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:               const void* = NULL
                flags: VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:       VkBool32 = 0
                rasterizerDiscardEnable: VkBool32 = 0
                polygonMode:       VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:        VkCullModeFlags = 0 (VK_CULL_MODE_NONE)
                frontFace:           VkFrontFace = VK_FRONT_FACE_CLOCKWISE (1)
                depthBiasEnable:        VkBool32 = 0
                depthBiasConstantFactor:   float = 0
                depthBiasClamp:            float = 0
                depthBiasSlopeFactor:      float = 0
                lineWidth:                 float = 1
            pMultisampleState: const VkPipelineMultisampleStateCreateInfo* = 00000047B9FEDD28:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:               const void* = NULL
                flags: VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples: VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:    VkBool32 = 0
                minSampleShading:          float = 1
                pSampleMask: const VkSampleMask* = NULL
                alphaToCoverageEnable:  VkBool32 = 0
                alphaToOneEnable:       VkBool32 = 0
            pDepthStencilState: const VkPipelineDepthStencilStateCreateInfo* = 00000047B9FEDE10:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:               const void* = NULL
                flags: VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:        VkBool32 = 1
                depthWriteEnable:       VkBool32 = 1
                depthCompareOp:      VkCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL (3)
                depthBoundsTestEnable:  VkBool32 = 0
                stencilTestEnable:      VkBool32 = 0
                front:          VkStencilOpState = 00000047B9FEDE38:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                back:           VkStencilOpState = 00000047B9FEDE54:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                minDepthBounds:            float = 0
                maxDepthBounds:            float = 0
            pColorBlendState: const VkPipelineColorBlendStateCreateInfo* = 00000047B9FEDDB8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:               const void* = NULL
                flags: VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:          VkBool32 = 0
                logicOp:               VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount:        uint32_t = 1
                pAttachments: const VkPipelineColorBlendAttachmentState* = 00000047B9FEDD78
                    pAttachments[0]: const VkPipelineColorBlendAttachmentState = 00000047B9FEDD78:
                        blendEnable:            VkBool32 = 0
                        srcColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask: VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:         float[4] = 00000047B9FEDDE0
                    blendConstants[0]:         float = 0
                    blendConstants[1]:         float = 0
                    blendConstants[2]:         float = 0
                    blendConstants[3]:         float = 0
            pDynamicState: const VkPipelineDynamicStateCreateInfo* = 00000047B9FEDC38:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:               const void* = NULL
                flags: VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:      uint32_t = 3
                pDynamicStates: const VkDynamicState* = 00000047B9FEDC08
                    pDynamicStates[0]: const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]: const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
                    pDynamicStates[2]: const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)
            layout:         VkPipelineLayout = 9638F80000000036
            renderPass:         VkRenderPass = 0000000000000000
            subpass:                uint32_t = 0
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = -1
        pNext: VkPipelineRenderingCreateInfo = 00000047B9FEDE98:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO (1000044002)
            pNext:               const void* = NULL
            viewMask:               uint32_t = 0
            colorAttachmentCount:   uint32_t = 1
            pColorAttachmentFormats: const VkFormat* = 00000047B9FEDED8
                pColorAttachmentFormats[0]: const VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
            depthAttachmentFormat:  VkFormat = VK_FORMAT_UNDEFINED (0)
            stencilAttachmentFormat: VkFormat = VK_FORMAT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A73DA190
        pPipelines[0]:        VkPipeline = 944A2C0000000039

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = 2723BA0000000037
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = 59F7450000000038
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 4295AB0000000035
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 210D07000000003A

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 2B424A0000000034
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 5EB05E000000003B

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 2B424A0000000034
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 9F9B41000000003C

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 2B424A0000000034
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 59FFE0000000003D

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 2B424A0000000034
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 5C5283000000003E

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 2B424A0000000034
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 808562000000003F

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 2B424A0000000034
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 56C9BD0000000040

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE3E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FEE3FC:
            width:                  uint32_t = 512
            height:                 uint32_t = 512
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 20 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 6612E40000000041

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE3E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FEE3FC:
            width:                  uint32_t = 512
            height:                 uint32_t = 512
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 20 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 89E60F0000000042

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 89E60F0000000042
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE218:
        size:               VkDeviceSize = 12632192
        alignment:          VkDeviceSize = 65536
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 89E60F0000000042
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 5177344

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE4B0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_CUBE (3)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE4D8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE4E8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 6
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 535B660000000043

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE2E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE308:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE318:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 603CD90000000044

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 8CC1D80000000045

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 4F8A8B0000000046

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 69EEAA0000000047

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 7323F50000000048

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 40B43C0000000049

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDA10:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDD40
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD40:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 74D977000000004A

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDA30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 2
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDD40
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD40:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD58:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 67022E000000004B

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEDFB8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 2
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDF58
            pSetLayouts[0]: const VkDescriptorSetLayout = 74D977000000004A
            pSetLayouts[1]: const VkDescriptorSetLayout = 67022E000000004B
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = 45D6D1000000004C

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED638:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 956
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = 73A850000000004D

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED638:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 2340
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = 612F93000000004E

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkGraphicsPipelineCreateInfo* = 00000047B9FEDF40
        pCreateInfos[0]: const VkGraphicsPipelineCreateInfo = 00000047B9FEDF40:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:               const void* = VkPipelineRenderingCreateInfo
            flags:     VkPipelineCreateFlags = 0
            stageCount:             uint32_t = 2
            pStages: const VkPipelineShaderStageCreateInfo* = 00000047B9FED900
                pStages[0]: const VkPipelineShaderStageCreateInfo = 00000047B9FED900:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:           VkShaderModule = 73A850000000004D
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
                pStages[1]: const VkPipelineShaderStageCreateInfo = 00000047B9FED930:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:           VkShaderModule = 612F93000000004E
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
            pVertexInputState: const VkPipelineVertexInputStateCreateInfo* = 00000047B9FEDB78:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:               const void* = NULL
                flags: VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount: uint32_t = 1
                pVertexBindingDescriptions: const VkVertexInputBindingDescription* = 00000047B9FEDAD8
                    pVertexBindingDescriptions[0]: const VkVertexInputBindingDescription = 00000047B9FEDAD8:
                        binding:                uint32_t = 0
                        stride:                 uint32_t = 32
                        inputRate:     VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 3
                pVertexAttributeDescriptions: const VkVertexInputAttributeDescription* = 00000047B9FEDA70
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 00000047B9FEDA70:
                        location:               uint32_t = 0
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 00000047B9FEDA80:
                        location:               uint32_t = 1
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 00000047B9FEDA90:
                        location:               uint32_t = 2
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                 uint32_t = 24
            pInputAssemblyState: const VkPipelineInputAssemblyStateCreateInfo* = 00000047B9FEDBC8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:               const void* = NULL
                flags: VkPipelineInputAssemblyStateCreateFlags = 0
                topology:    VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable: VkBool32 = 0
            pTessellationState: const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState: const VkPipelineViewportStateCreateInfo* = 00000047B9FEDC78:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:               const void* = NULL
                flags: VkPipelineViewportStateCreateFlags = 0
                viewportCount:          uint32_t = 1
                pViewports:    const VkViewport* = UNUSED
                scissorCount:           uint32_t = 1
                pScissors:       const VkRect2D* = UNUSED
            pRasterizationState: const VkPipelineRasterizationStateCreateInfo* = 00000047B9FEDCD0:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:               const void* = NULL
                flags: VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:       VkBool32 = 0
                rasterizerDiscardEnable: VkBool32 = 0
                polygonMode:       VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:        VkCullModeFlags = 0 (VK_CULL_MODE_NONE)
                frontFace:           VkFrontFace = VK_FRONT_FACE_CLOCKWISE (1)
                depthBiasEnable:        VkBool32 = 0
                depthBiasConstantFactor:   float = 0
                depthBiasClamp:            float = 0
                depthBiasSlopeFactor:      float = 0
                lineWidth:                 float = 1
            pMultisampleState: const VkPipelineMultisampleStateCreateInfo* = 00000047B9FEDD28:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:               const void* = NULL
                flags: VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples: VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:    VkBool32 = 0
                minSampleShading:          float = 1
                pSampleMask: const VkSampleMask* = NULL
                alphaToCoverageEnable:  VkBool32 = 0
                alphaToOneEnable:       VkBool32 = 0
            pDepthStencilState: const VkPipelineDepthStencilStateCreateInfo* = 00000047B9FEDE10:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:               const void* = NULL
                flags: VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:        VkBool32 = 1
                depthWriteEnable:       VkBool32 = 1
                depthCompareOp:      VkCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL (3)
                depthBoundsTestEnable:  VkBool32 = 0
                stencilTestEnable:      VkBool32 = 0
                front:          VkStencilOpState = 00000047B9FEDE38:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                back:           VkStencilOpState = 00000047B9FEDE54:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                minDepthBounds:            float = 0
                maxDepthBounds:            float = 0
            pColorBlendState: const VkPipelineColorBlendStateCreateInfo* = 00000047B9FEDDB8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:               const void* = NULL
                flags: VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:          VkBool32 = 0
                logicOp:               VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount:        uint32_t = 1
                pAttachments: const VkPipelineColorBlendAttachmentState* = 00000047B9FEDD78
                    pAttachments[0]: const VkPipelineColorBlendAttachmentState = 00000047B9FEDD78:
                        blendEnable:            VkBool32 = 0
                        srcColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask: VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:         float[4] = 00000047B9FEDDE0
                    blendConstants[0]:         float = 0
                    blendConstants[1]:         float = 0
                    blendConstants[2]:         float = 0
                    blendConstants[3]:         float = 0
            pDynamicState: const VkPipelineDynamicStateCreateInfo* = 00000047B9FEDC38:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:               const void* = NULL
                flags: VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:      uint32_t = 3
                pDynamicStates: const VkDynamicState* = 00000047B9FEDC08
                    pDynamicStates[0]: const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]: const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
                    pDynamicStates[2]: const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)
            layout:         VkPipelineLayout = 45D6D1000000004C
            renderPass:         VkRenderPass = 0000000000000000
            subpass:                uint32_t = 0
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = -1
        pNext: VkPipelineRenderingCreateInfo = 00000047B9FEDE98:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO (1000044002)
            pNext:               const void* = NULL
            viewMask:               uint32_t = 0
            colorAttachmentCount:   uint32_t = 1
            pColorAttachmentFormats: const VkFormat* = 00000047B9FEDED8
                pColorAttachmentFormats[0]: const VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
            depthAttachmentFormat:  VkFormat = VK_FORMAT_UNDEFINED (0)
            stencilAttachmentFormat: VkFormat = VK_FORMAT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A73DA3D0
        pPipelines[0]:        VkPipeline = 7CD292000000004F

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = 73A850000000004D
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = 612F93000000004E
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 67022E000000004B
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 7F79AD0000000050

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE3E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FEE3FC:
            width:                  uint32_t = 32
            height:                 uint32_t = 32
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 20 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 7DDD740000000051

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE3E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FEE3FC:
            width:                  uint32_t = 32
            height:                 uint32_t = 32
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 20 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 72303F0000000052

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 72303F0000000052
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE218:
        size:               VkDeviceSize = 49152
        alignment:          VkDeviceSize = 4096
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 72303F0000000052
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 17813504

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE4B0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_CUBE (3)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE4D8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE4E8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 6
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 02A7F70000000053

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 74EA280000000054

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 6871490000000055

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 05C59A0000000056

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 73B89B0000000057

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE2E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE308:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE318:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 625F640000000058

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 0EE24D0000000059

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDA10:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDD40
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD40:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 4868E6000000005A

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDA30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDD40
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD40:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 6DCC3F000000005B

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDA50:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 2
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDD40
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD40:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEDD58:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 130160000000005C

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEDFB8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 3
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDF58
            pSetLayouts[0]: const VkDescriptorSetLayout = 4868E6000000005A
            pSetLayouts[1]: const VkDescriptorSetLayout = 130160000000005C
            pSetLayouts[2]: const VkDescriptorSetLayout = 6DCC3F000000005B
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = 4256C1000000005D

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED638:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 1348
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = 96FBE2000000005E

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED638:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 3884
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = 176083000000005F

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkGraphicsPipelineCreateInfo* = 00000047B9FEDF40
        pCreateInfos[0]: const VkGraphicsPipelineCreateInfo = 00000047B9FEDF40:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:               const void* = VkPipelineRenderingCreateInfo
            flags:     VkPipelineCreateFlags = 0
            stageCount:             uint32_t = 2
            pStages: const VkPipelineShaderStageCreateInfo* = 00000047B9FED900
                pStages[0]: const VkPipelineShaderStageCreateInfo = 00000047B9FED900:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:           VkShaderModule = 96FBE2000000005E
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
                pStages[1]: const VkPipelineShaderStageCreateInfo = 00000047B9FED930:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:           VkShaderModule = 176083000000005F
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
            pVertexInputState: const VkPipelineVertexInputStateCreateInfo* = 00000047B9FEDB78:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:               const void* = NULL
                flags: VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount: uint32_t = 1
                pVertexBindingDescriptions: const VkVertexInputBindingDescription* = 00000047B9FEDAD8
                    pVertexBindingDescriptions[0]: const VkVertexInputBindingDescription = 00000047B9FEDAD8:
                        binding:                uint32_t = 0
                        stride:                 uint32_t = 32
                        inputRate:     VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 3
                pVertexAttributeDescriptions: const VkVertexInputAttributeDescription* = 00000047B9FEDA70
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 00000047B9FEDA70:
                        location:               uint32_t = 0
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 00000047B9FEDA80:
                        location:               uint32_t = 1
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 00000047B9FEDA90:
                        location:               uint32_t = 2
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                 uint32_t = 24
            pInputAssemblyState: const VkPipelineInputAssemblyStateCreateInfo* = 00000047B9FEDBC8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:               const void* = NULL
                flags: VkPipelineInputAssemblyStateCreateFlags = 0
                topology:    VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable: VkBool32 = 0
            pTessellationState: const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState: const VkPipelineViewportStateCreateInfo* = 00000047B9FEDC78:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:               const void* = NULL
                flags: VkPipelineViewportStateCreateFlags = 0
                viewportCount:          uint32_t = 1
                pViewports:    const VkViewport* = UNUSED
                scissorCount:           uint32_t = 1
                pScissors:       const VkRect2D* = UNUSED
            pRasterizationState: const VkPipelineRasterizationStateCreateInfo* = 00000047B9FEDCD0:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:               const void* = NULL
                flags: VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:       VkBool32 = 0
                rasterizerDiscardEnable: VkBool32 = 0
                polygonMode:       VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:        VkCullModeFlags = 0 (VK_CULL_MODE_NONE)
                frontFace:           VkFrontFace = VK_FRONT_FACE_CLOCKWISE (1)
                depthBiasEnable:        VkBool32 = 0
                depthBiasConstantFactor:   float = 0
                depthBiasClamp:            float = 0
                depthBiasSlopeFactor:      float = 0
                lineWidth:                 float = 1
            pMultisampleState: const VkPipelineMultisampleStateCreateInfo* = 00000047B9FEDD28:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:               const void* = NULL
                flags: VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples: VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:    VkBool32 = 0
                minSampleShading:          float = 1
                pSampleMask: const VkSampleMask* = NULL
                alphaToCoverageEnable:  VkBool32 = 0
                alphaToOneEnable:       VkBool32 = 0
            pDepthStencilState: const VkPipelineDepthStencilStateCreateInfo* = 00000047B9FEDE10:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:               const void* = NULL
                flags: VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:        VkBool32 = 1
                depthWriteEnable:       VkBool32 = 1
                depthCompareOp:      VkCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL (3)
                depthBoundsTestEnable:  VkBool32 = 0
                stencilTestEnable:      VkBool32 = 0
                front:          VkStencilOpState = 00000047B9FEDE38:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                back:           VkStencilOpState = 00000047B9FEDE54:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                minDepthBounds:            float = 0
                maxDepthBounds:            float = 0
            pColorBlendState: const VkPipelineColorBlendStateCreateInfo* = 00000047B9FEDDB8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:               const void* = NULL
                flags: VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:          VkBool32 = 0
                logicOp:               VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount:        uint32_t = 1
                pAttachments: const VkPipelineColorBlendAttachmentState* = 00000047B9FEDD78
                    pAttachments[0]: const VkPipelineColorBlendAttachmentState = 00000047B9FEDD78:
                        blendEnable:            VkBool32 = 0
                        srcColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask: VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:         float[4] = 00000047B9FEDDE0
                    blendConstants[0]:         float = 0
                    blendConstants[1]:         float = 0
                    blendConstants[2]:         float = 0
                    blendConstants[3]:         float = 0
            pDynamicState: const VkPipelineDynamicStateCreateInfo* = 00000047B9FEDC38:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:               const void* = NULL
                flags: VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:      uint32_t = 3
                pDynamicStates: const VkDynamicState* = 00000047B9FEDC08
                    pDynamicStates[0]: const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]: const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
                    pDynamicStates[2]: const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)
            layout:         VkPipelineLayout = 4256C1000000005D
            renderPass:         VkRenderPass = 0000000000000000
            subpass:                uint32_t = 0
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = -1
        pNext: VkPipelineRenderingCreateInfo = 00000047B9FEDE98:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO (1000044002)
            pNext:               const void* = NULL
            viewMask:               uint32_t = 0
            colorAttachmentCount:   uint32_t = 1
            pColorAttachmentFormats: const VkFormat* = 00000047B9FEDED8
                pColorAttachmentFormats[0]: const VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
            depthAttachmentFormat:  VkFormat = VK_FORMAT_UNDEFINED (0)
            stencilAttachmentFormat: VkFormat = VK_FORMAT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A73DAAF0
        pPipelines[0]:        VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = 96FBE2000000005E
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = 176083000000005F
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 6DCC3F000000005B
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 9389C50000000061

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 6DCC3F000000005B
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 1D4E2E0000000062

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 6DCC3F000000005B
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 5EF3070000000063

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 6DCC3F000000005B
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 9F58380000000064

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = 6DCC3F000000005B
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 5DBCF90000000065

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE3E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FEE3FC:
            width:                  uint32_t = 128
            height:                 uint32_t = 128
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 5
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 22 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 5011AA0000000066

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE3E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FEE3FC:
            width:                  uint32_t = 128
            height:                 uint32_t = 128
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 5
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 22 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 85798B0000000067

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 85798B0000000067
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE218:
        size:               VkDeviceSize = 1187968
        alignment:          VkDeviceSize = 65536
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 85798B0000000067
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 17891328

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE4B0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 85798B0000000067
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_CUBE (3)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE4D8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE4E8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 5
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 6
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 5684940000000068

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 85798B0000000067
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 564FDD0000000069

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 85798B0000000067
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 852B56000000006A

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 85798B0000000067
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 53E60F000000006B

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 85798B0000000067
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 2C71F0000000006C

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 85798B0000000067
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 8F1C31000000006D

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 85798B0000000067
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 4E4775000000006E

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE340:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        extent:               VkExtent3D = 00000047B9FEE35C:
            width:                  uint32_t = 1
            height:                 uint32_t = 1
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 6 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 2D93AC000000006F

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE340:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        extent:               VkExtent3D = 00000047B9FEE35C:
            width:                  uint32_t = 1
            height:                 uint32_t = 1
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 6 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = B3EE8B0000000070

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = B3EE8B0000000070
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE178:
        size:               VkDeviceSize = 4096
        alignment:          VkDeviceSize = 4096
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = B3EE8B0000000070
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 17862656

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73A9F98
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC0D0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC320
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEC320:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = B3EE8B0000000070
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC350:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = D10D270000000018
    offset:             VkDeviceSize = 0
    size:               VkDeviceSize = 18446744073709551615
    flags:          VkMemoryMapFlags = 0
    ppData:                   void** = 000001A5ADD70000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = D10D270000000018

Thread 0, Frame 0:
vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73A9F98
    srcBuffer:              VkBuffer = 84C0580000000017
    dstImage:                VkImage = B3EE8B0000000070
    dstImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:            uint32_t = 1
    pRegions: const VkBufferImageCopy* = 00000047B9FEE378
        pRegions[0]: const VkBufferImageCopy = 00000047B9FEE378:
            bufferOffset:       VkDeviceSize = 0
            bufferRowLength:        uint32_t = 0
            bufferImageHeight:      uint32_t = 0
            imageSubresource: VkImageSubresourceLayers = 00000047B9FEE388:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 0
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
            imageOffset:          VkOffset3D = 00000047B9FEE398:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            imageExtent:          VkExtent3D = 00000047B9FEE3A4:
                width:                  uint32_t = 1
                height:                 uint32_t = 1
                depth:                  uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73A9F98
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC0D0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC320
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEC320:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = B3EE8B0000000070
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC350:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = B3EE8B0000000070
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R8G8B8A8_UNORM (37)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 44695A0000000071

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE3E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:               VkExtent3D = 00000047B9FEE3FC:
            width:                  uint32_t = 1024
            height:                 uint32_t = 1024
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 2894590000000072

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE3E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:               VkExtent3D = 00000047B9FEE3FC:
            width:                  uint32_t = 1024
            height:                 uint32_t = 1024
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = B6BEE80000000073

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = B6BEE80000000073
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE218:
        size:               VkDeviceSize = 4735104
        alignment:          VkDeviceSize = 65536
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = B6BEE80000000073
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 19136512

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE4B0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = B6BEE80000000073
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:   VkComponentMapping = 00000047B9FEE4D8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE4E8:
            aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 421A0F0000000074

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE2E0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = B6BEE80000000073
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:   VkComponentMapping = 00000047B9FEE308:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE318:
            aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 33F7660000000075

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = BD60BD0000000076

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE108:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE0A8
            pSetLayouts[0]: const VkDescriptorSetLayout = BD60BD0000000076
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = B82DE40000000077

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 3F36830000000078

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB80:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = A182620000000079

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE108:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 2
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE0A8
            pSetLayouts[0]: const VkDescriptorSetLayout = 3F36830000000078
            pSetLayouts[1]: const VkDescriptorSetLayout = A182620000000079
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = B3FFC1000000007A

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FEE2E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 13896
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = 051820000000007B

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkComputePipelineCreateInfo* = 00000047B9FEE5B0
        pCreateInfos[0]: const VkComputePipelineCreateInfo = 00000047B9FEE5B0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:               const void* = NULL
            flags:     VkPipelineCreateFlags = 0
            stage: VkPipelineShaderStageCreateInfo = 00000047B9FEE5C8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:               const void* = NULL
                flags: VkPipelineShaderStageCreateFlags = 0
                stage:     VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                module:           VkShaderModule = 051820000000007B
                pName:               const char* = "main"
                pSpecializationInfo: const VkSpecializationInfo* = NULL
            layout:         VkPipelineLayout = B3FFC1000000007A
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A748B9E0
        pPipelines[0]:        VkPipeline = B8A507000000007C

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = 051820000000007B
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 2
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEA8:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = B4AE2E000000007D

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE108:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE0A8
            pSetLayouts[0]: const VkDescriptorSetLayout = B4AE2E000000007D
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = 010AC5000000007E

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 2
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEA8:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = B3C7BC000000007F

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB80:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = AD937B0000000080

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE108:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 2
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE0A8
            pSetLayouts[0]: const VkDescriptorSetLayout = B3C7BC000000007F
            pSetLayouts[1]: const VkDescriptorSetLayout = AD937B0000000080
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = 0F3EAA0000000081

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FEE2E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 6704
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = CC25C90000000082

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkComputePipelineCreateInfo* = 00000047B9FEE5B0
        pCreateInfos[0]: const VkComputePipelineCreateInfo = 00000047B9FEE5B0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:               const void* = NULL
            flags:     VkPipelineCreateFlags = 0
            stage: VkPipelineShaderStageCreateInfo = 00000047B9FEE5C8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:               const void* = NULL
                flags: VkPipelineShaderStageCreateFlags = 0
                stage:     VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                module:           VkShaderModule = CC25C90000000082
                pName:               const char* = "main"
                pSpecializationInfo: const VkSpecializationInfo* = NULL
            layout:         VkPipelineLayout = 0F3EAA0000000081
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A748B980
        pPipelines[0]:        VkPipeline = A171580000000083

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = CC25C90000000082
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 3
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEA8:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[2]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEC0:
                binding:                uint32_t = 2
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 13CC1F0000000084

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE108:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE0A8
            pSetLayouts[0]: const VkDescriptorSetLayout = 13CC1F0000000084
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = CA0B160000000085

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 3
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEA8:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[2]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEC0:
                binding:                uint32_t = 2
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = A6B6CD0000000086

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB80:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 149D740000000087

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE108:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 2
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE0A8
            pSetLayouts[0]: const VkDescriptorSetLayout = A6B6CD0000000086
            pSetLayouts[1]: const VkDescriptorSetLayout = 149D740000000087
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = C079B30000000088

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FEE2E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 4612
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = 93D4F20000000089

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkComputePipelineCreateInfo* = 00000047B9FEE5B0
        pCreateInfos[0]: const VkComputePipelineCreateInfo = 00000047B9FEE5B0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:               const void* = NULL
            flags:     VkPipelineCreateFlags = 0
            stage: VkPipelineShaderStageCreateInfo = 00000047B9FEE5C8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:               const void* = NULL
                flags: VkPipelineShaderStageCreateFlags = 0
                stage:     VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                module:           VkShaderModule = 93D4F20000000089
                pName:               const char* = "main"
                pSpecializationInfo: const VkSpecializationInfo* = NULL
            layout:         VkPipelineLayout = C079B30000000088
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A748B5C0
        pPipelines[0]:        VkPipeline = 1983B0000000008A

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = 93D4F20000000089
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 6
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEA8:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[2]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEC0:
                binding:                uint32_t = 2
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[3]: const VkDescriptorSetLayoutBinding = 00000047B9FEDED8:
                binding:                uint32_t = 3
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[4]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEF0:
                binding:                uint32_t = 4
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[5]: const VkDescriptorSetLayoutBinding = 00000047B9FEDF08:
                binding:                uint32_t = 5
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = DE4E51000000008B

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE108:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE0A8
            pSetLayouts[0]: const VkDescriptorSetLayout = DE4E51000000008B
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = 9F1516000000008C

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 6
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEA8:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[2]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEC0:
                binding:                uint32_t = 2
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[3]: const VkDescriptorSetLayoutBinding = 00000047B9FEDED8:
                binding:                uint32_t = 3
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[4]: const VkDescriptorSetLayoutBinding = 00000047B9FEDEF0:
                binding:                uint32_t = 4
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[5]: const VkDescriptorSetLayoutBinding = 00000047B9FEDF08:
                binding:                uint32_t = 5
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = E0601F000000008D

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB80:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = D3DD54000000008E

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE108:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 2
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE0A8
            pSetLayouts[0]: const VkDescriptorSetLayout = E0601F000000008D
            pSetLayouts[1]: const VkDescriptorSetLayout = D3DD54000000008E
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = 993A4D000000008F

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FEE2E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 21548
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = E647EA0000000090

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkComputePipelineCreateInfo* = 00000047B9FEE5B0
        pCreateInfos[0]: const VkComputePipelineCreateInfo = 00000047B9FEE5B0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:               const void* = NULL
            flags:     VkPipelineCreateFlags = 0
            stage: VkPipelineShaderStageCreateInfo = 00000047B9FEE5C8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:               const void* = NULL
                flags: VkPipelineShaderStageCreateFlags = 0
                stage:     VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                module:           VkShaderModule = E647EA0000000090
                pName:               const char* = "main"
                pSpecializationInfo: const VkSpecializationInfo* = NULL
            layout:         VkPipelineLayout = 993A4D000000008F
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A748BC20
        pPipelines[0]:        VkPipeline = D68CBB0000000091

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = E647EA0000000090
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDE20:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE118
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE118:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 8168780000000092

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDE40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE150
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE150:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 17 (VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = EC25C90000000093

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDE60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 10
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE150
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE150:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEE168:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[2]: const VkDescriptorSetLayoutBinding = 00000047B9FEE180:
                binding:                uint32_t = 2
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[3]: const VkDescriptorSetLayoutBinding = 00000047B9FEE198:
                binding:                uint32_t = 3
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[4]: const VkDescriptorSetLayoutBinding = 00000047B9FEE1B0:
                binding:                uint32_t = 4
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[5]: const VkDescriptorSetLayoutBinding = 00000047B9FEE1C8:
                binding:                uint32_t = 5
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[6]: const VkDescriptorSetLayoutBinding = 00000047B9FEE1E0:
                binding:                uint32_t = 6
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[7]: const VkDescriptorSetLayoutBinding = 00000047B9FEE1F8:
                binding:                uint32_t = 7
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = NULL
            pBindings[8]: const VkDescriptorSetLayoutBinding = 00000047B9FEE210:
                binding:                uint32_t = 8
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = NULL
            pBindings[9]: const VkDescriptorSetLayoutBinding = 00000047B9FEE228:
                binding:                uint32_t = 9
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = E9B2EE0000000094

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDE80:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 4
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE150
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE150:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEE168:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[2]: const VkDescriptorSetLayoutBinding = 00000047B9FEE180:
                binding:                uint32_t = 2
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[3]: const VkDescriptorSetLayoutBinding = 00000047B9FEE198:
                binding:                uint32_t = 3
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = 8F5F070000000095

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDEA0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE118
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE118:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = CE045C0000000096

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE3C8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 5
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE368
            pSetLayouts[0]: const VkDescriptorSetLayout = 8168780000000092
            pSetLayouts[1]: const VkDescriptorSetLayout = EC25C90000000093
            pSetLayouts[2]: const VkDescriptorSetLayout = E9B2EE0000000094
            pSetLayouts[3]: const VkDescriptorSetLayout = 8F5F070000000095
            pSetLayouts[4]: const VkDescriptorSetLayout = CE045C0000000096
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = E150C50000000097

Thread 0, Frame 0:
vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorSetLayout: VkDescriptorSetLayout = 8168780000000092
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorSetLayout: VkDescriptorSetLayout = CE045C0000000096
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED628:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 3004
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = 8BADA20000000098

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED628:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 64320
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = C82A830000000099

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkGraphicsPipelineCreateInfo* = 00000047B9FEDF30
        pCreateInfos[0]: const VkGraphicsPipelineCreateInfo = 00000047B9FEDF30:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:               const void* = VkPipelineRenderingCreateInfo
            flags:     VkPipelineCreateFlags = 0
            stageCount:             uint32_t = 2
            pStages: const VkPipelineShaderStageCreateInfo* = 00000047B9FED8F0
                pStages[0]: const VkPipelineShaderStageCreateInfo = 00000047B9FED8F0:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:           VkShaderModule = 8BADA20000000098
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
                pStages[1]: const VkPipelineShaderStageCreateInfo = 00000047B9FED920:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:           VkShaderModule = C82A830000000099
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
            pVertexInputState: const VkPipelineVertexInputStateCreateInfo* = 00000047B9FEDB68:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:               const void* = NULL
                flags: VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount: uint32_t = 1
                pVertexBindingDescriptions: const VkVertexInputBindingDescription* = 00000047B9FEDAC8
                    pVertexBindingDescriptions[0]: const VkVertexInputBindingDescription = 00000047B9FEDAC8:
                        binding:                uint32_t = 0
                        stride:                 uint32_t = 32
                        inputRate:     VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 3
                pVertexAttributeDescriptions: const VkVertexInputAttributeDescription* = 00000047B9FEDA60
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 00000047B9FEDA60:
                        location:               uint32_t = 0
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 00000047B9FEDA70:
                        location:               uint32_t = 1
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 00000047B9FEDA80:
                        location:               uint32_t = 2
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                 uint32_t = 24
            pInputAssemblyState: const VkPipelineInputAssemblyStateCreateInfo* = 00000047B9FEDBB8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:               const void* = NULL
                flags: VkPipelineInputAssemblyStateCreateFlags = 0
                topology:    VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable: VkBool32 = 0
            pTessellationState: const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState: const VkPipelineViewportStateCreateInfo* = 00000047B9FEDC68:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:               const void* = NULL
                flags: VkPipelineViewportStateCreateFlags = 0
                viewportCount:          uint32_t = 1
                pViewports:    const VkViewport* = UNUSED
                scissorCount:           uint32_t = 1
                pScissors:       const VkRect2D* = UNUSED
            pRasterizationState: const VkPipelineRasterizationStateCreateInfo* = 00000047B9FEDCC0:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:               const void* = NULL
                flags: VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:       VkBool32 = 0
                rasterizerDiscardEnable: VkBool32 = 0
                polygonMode:       VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:        VkCullModeFlags = 2 (VK_CULL_MODE_BACK_BIT)
                frontFace:           VkFrontFace = VK_FRONT_FACE_CLOCKWISE (1)
                depthBiasEnable:        VkBool32 = 0
                depthBiasConstantFactor:   float = 0
                depthBiasClamp:            float = 0
                depthBiasSlopeFactor:      float = 0
                lineWidth:                 float = 1
            pMultisampleState: const VkPipelineMultisampleStateCreateInfo* = 00000047B9FEDD18:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:               const void* = NULL
                flags: VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples: VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:    VkBool32 = 0
                minSampleShading:          float = 1
                pSampleMask: const VkSampleMask* = NULL
                alphaToCoverageEnable:  VkBool32 = 0
                alphaToOneEnable:       VkBool32 = 0
            pDepthStencilState: const VkPipelineDepthStencilStateCreateInfo* = 00000047B9FEDE00:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:               const void* = NULL
                flags: VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:        VkBool32 = 1
                depthWriteEnable:       VkBool32 = 0
                depthCompareOp:      VkCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL (3)
                depthBoundsTestEnable:  VkBool32 = 0
                stencilTestEnable:      VkBool32 = 0
                front:          VkStencilOpState = 00000047B9FEDE28:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                back:           VkStencilOpState = 00000047B9FEDE44:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                minDepthBounds:            float = 0
                maxDepthBounds:            float = 0
            pColorBlendState: const VkPipelineColorBlendStateCreateInfo* = 00000047B9FEDDA8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:               const void* = NULL
                flags: VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:          VkBool32 = 0
                logicOp:               VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount:        uint32_t = 1
                pAttachments: const VkPipelineColorBlendAttachmentState* = 00000047B9FEDD68
                    pAttachments[0]: const VkPipelineColorBlendAttachmentState = 00000047B9FEDD68:
                        blendEnable:            VkBool32 = 0
                        srcColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask: VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:         float[4] = 00000047B9FEDDD0
                    blendConstants[0]:         float = 0
                    blendConstants[1]:         float = 0
                    blendConstants[2]:         float = 0
                    blendConstants[3]:         float = 0
            pDynamicState: const VkPipelineDynamicStateCreateInfo* = 00000047B9FEDC28:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:               const void* = NULL
                flags: VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:      uint32_t = 3
                pDynamicStates: const VkDynamicState* = 00000047B9FEDBF8
                    pDynamicStates[0]: const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]: const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
                    pDynamicStates[2]: const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)
            layout:         VkPipelineLayout = E150C50000000097
            renderPass:         VkRenderPass = 0000000000000000
            subpass:                uint32_t = 0
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = -1
        pNext: VkPipelineRenderingCreateInfo = 00000047B9FEDE88:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO (1000044002)
            pNext:               const void* = NULL
            viewMask:               uint32_t = 0
            colorAttachmentCount:   uint32_t = 1
            pColorAttachmentFormats: const VkFormat* = 00000047B9FEDEC8
                pColorAttachmentFormats[0]: const VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
            depthAttachmentFormat:  VkFormat = VK_FORMAT_D32_SFLOAT (126)
            stencilAttachmentFormat: VkFormat = VK_FORMAT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A748D060
        pPipelines[0]:        VkPipeline = E750A0000000009A

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = 8BADA20000000098
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = C82A830000000099
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDE20:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE118
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE118:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = F6FBC1000000009B

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDE40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE150
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE150:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = C25F26000000009C

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE3C8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 2
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE368
            pSetLayouts[0]: const VkDescriptorSetLayout = F6FBC1000000009B
            pSetLayouts[1]: const VkDescriptorSetLayout = C25F26000000009C
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = FB320F000000009D

Thread 0, Frame 0:
vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorSetLayout: VkDescriptorSetLayout = F6FBC1000000009B
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED5C8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 2636
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = F9A524000000009E

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkGraphicsPipelineCreateInfo* = 00000047B9FEDED0
        pCreateInfos[0]: const VkGraphicsPipelineCreateInfo = 00000047B9FEDED0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:               const void* = VkPipelineRenderingCreateInfo
            flags:     VkPipelineCreateFlags = 0
            stageCount:             uint32_t = 1
            pStages: const VkPipelineShaderStageCreateInfo* = 00000047B9FED890
                pStages[0]: const VkPipelineShaderStageCreateInfo = 00000047B9FED890:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:           VkShaderModule = F9A524000000009E
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
            pVertexInputState: const VkPipelineVertexInputStateCreateInfo* = 00000047B9FEDB08:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:               const void* = NULL
                flags: VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount: uint32_t = 1
                pVertexBindingDescriptions: const VkVertexInputBindingDescription* = 00000047B9FEDA68
                    pVertexBindingDescriptions[0]: const VkVertexInputBindingDescription = 00000047B9FEDA68:
                        binding:                uint32_t = 0
                        stride:                 uint32_t = 32
                        inputRate:     VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 3
                pVertexAttributeDescriptions: const VkVertexInputAttributeDescription* = 00000047B9FEDA00
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 00000047B9FEDA00:
                        location:               uint32_t = 0
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 00000047B9FEDA10:
                        location:               uint32_t = 1
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 00000047B9FEDA20:
                        location:               uint32_t = 2
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                 uint32_t = 24
            pInputAssemblyState: const VkPipelineInputAssemblyStateCreateInfo* = 00000047B9FEDB58:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:               const void* = NULL
                flags: VkPipelineInputAssemblyStateCreateFlags = 0
                topology:    VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable: VkBool32 = 0
            pTessellationState: const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState: const VkPipelineViewportStateCreateInfo* = 00000047B9FEDC08:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:               const void* = NULL
                flags: VkPipelineViewportStateCreateFlags = 0
                viewportCount:          uint32_t = 1
                pViewports:    const VkViewport* = UNUSED
                scissorCount:           uint32_t = 1
                pScissors:       const VkRect2D* = UNUSED
            pRasterizationState: const VkPipelineRasterizationStateCreateInfo* = 00000047B9FEDC60:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:               const void* = NULL
                flags: VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:       VkBool32 = 0
                rasterizerDiscardEnable: VkBool32 = 0
                polygonMode:       VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:        VkCullModeFlags = 2 (VK_CULL_MODE_BACK_BIT)
                frontFace:           VkFrontFace = VK_FRONT_FACE_CLOCKWISE (1)
                depthBiasEnable:        VkBool32 = 0
                depthBiasConstantFactor:   float = 0
                depthBiasClamp:            float = 0
                depthBiasSlopeFactor:      float = 0
                lineWidth:                 float = 1
            pMultisampleState: const VkPipelineMultisampleStateCreateInfo* = 00000047B9FEDCB8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:               const void* = NULL
                flags: VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples: VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:    VkBool32 = 0
                minSampleShading:          float = 1
                pSampleMask: const VkSampleMask* = NULL
                alphaToCoverageEnable:  VkBool32 = 0
                alphaToOneEnable:       VkBool32 = 0
            pDepthStencilState: const VkPipelineDepthStencilStateCreateInfo* = 00000047B9FEDDA0:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:               const void* = NULL
                flags: VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:        VkBool32 = 1
                depthWriteEnable:       VkBool32 = 1
                depthCompareOp:      VkCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL (3)
                depthBoundsTestEnable:  VkBool32 = 0
                stencilTestEnable:      VkBool32 = 0
                front:          VkStencilOpState = 00000047B9FEDDC8:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                back:           VkStencilOpState = 00000047B9FEDDE4:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                minDepthBounds:            float = 0
                maxDepthBounds:            float = 0
            pColorBlendState: const VkPipelineColorBlendStateCreateInfo* = 00000047B9FEDD48:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:               const void* = NULL
                flags: VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:          VkBool32 = 0
                logicOp:               VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount:        uint32_t = 1
                pAttachments: const VkPipelineColorBlendAttachmentState* = 00000047B9FEDD08
                    pAttachments[0]: const VkPipelineColorBlendAttachmentState = 00000047B9FEDD08:
                        blendEnable:            VkBool32 = 0
                        srcColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask: VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:         float[4] = 00000047B9FEDD70
                    blendConstants[0]:         float = 0
                    blendConstants[1]:         float = 0
                    blendConstants[2]:         float = 0
                    blendConstants[3]:         float = 0
            pDynamicState: const VkPipelineDynamicStateCreateInfo* = 00000047B9FEDBC8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:               const void* = NULL
                flags: VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:      uint32_t = 3
                pDynamicStates: const VkDynamicState* = 00000047B9FEDB98
                    pDynamicStates[0]: const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]: const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
                    pDynamicStates[2]: const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)
            layout:         VkPipelineLayout = FB320F000000009D
            renderPass:         VkRenderPass = 0000000000000000
            subpass:                uint32_t = 0
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = -1
        pNext: VkPipelineRenderingCreateInfo = 00000047B9FEDE28:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO (1000044002)
            pNext:               const void* = NULL
            viewMask:               uint32_t = 0
            colorAttachmentCount:   uint32_t = 0
            pColorAttachmentFormats: const VkFormat* = 00000047B9FEDE68
            depthAttachmentFormat:  VkFormat = VK_FORMAT_D32_SFLOAT (126)
            stencilAttachmentFormat: VkFormat = VK_FORMAT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A7490C60
        pPipelines[0]:        VkPipeline = FC68DD000000009F

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = F9A524000000009E
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDE20:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE118
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE118:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC (8)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = FEF35A00000000A0

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDE40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 2
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEE150
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEE150:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
            pBindings[1]: const VkDescriptorSetLayoutBinding = 00000047B9FEE168:
                binding:                uint32_t = 1
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = E2478B00000000A1

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE3C8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 2
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE368
            pSetLayouts[0]: const VkDescriptorSetLayout = FEF35A00000000A0
            pSetLayouts[1]: const VkDescriptorSetLayout = E2478B00000000A1
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = FBBAE800000000A2

Thread 0, Frame 0:
vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorSetLayout: VkDescriptorSetLayout = FEF35A00000000A0
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FED5C8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 6772
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = F9DDB900000000A3

Thread 0, Frame 0:
vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkGraphicsPipelineCreateInfo* = 00000047B9FEDED0
        pCreateInfos[0]: const VkGraphicsPipelineCreateInfo = 00000047B9FEDED0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:               const void* = VkPipelineRenderingCreateInfo
            flags:     VkPipelineCreateFlags = 0
            stageCount:             uint32_t = 1
            pStages: const VkPipelineShaderStageCreateInfo* = 00000047B9FED890
                pStages[0]: const VkPipelineShaderStageCreateInfo = 00000047B9FED890:
                    sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:               const void* = NULL
                    flags: VkPipelineShaderStageCreateFlags = 0
                    stage:     VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:           VkShaderModule = F9DDB900000000A3
                    pName:               const char* = "main"
                    pSpecializationInfo: const VkSpecializationInfo* = NULL
            pVertexInputState: const VkPipelineVertexInputStateCreateInfo* = 00000047B9FEDB08:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:               const void* = NULL
                flags: VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount: uint32_t = 1
                pVertexBindingDescriptions: const VkVertexInputBindingDescription* = 00000047B9FEDA68
                    pVertexBindingDescriptions[0]: const VkVertexInputBindingDescription = 00000047B9FEDA68:
                        binding:                uint32_t = 0
                        stride:                 uint32_t = 32
                        inputRate:     VkVertexInputRate = VK_VERTEX_INPUT_RATE_VERTEX (0)
                vertexAttributeDescriptionCount: uint32_t = 3
                pVertexAttributeDescriptions: const VkVertexInputAttributeDescription* = 00000047B9FEDA00
                    pVertexAttributeDescriptions[0]: const VkVertexInputAttributeDescription = 00000047B9FEDA00:
                        location:               uint32_t = 0
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 0
                    pVertexAttributeDescriptions[1]: const VkVertexInputAttributeDescription = 00000047B9FEDA10:
                        location:               uint32_t = 1
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32B32_SFLOAT (106)
                        offset:                 uint32_t = 12
                    pVertexAttributeDescriptions[2]: const VkVertexInputAttributeDescription = 00000047B9FEDA20:
                        location:               uint32_t = 2
                        binding:                uint32_t = 0
                        format:                 VkFormat = VK_FORMAT_R32G32_SFLOAT (103)
                        offset:                 uint32_t = 24
            pInputAssemblyState: const VkPipelineInputAssemblyStateCreateInfo* = 00000047B9FEDB58:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:               const void* = NULL
                flags: VkPipelineInputAssemblyStateCreateFlags = 0
                topology:    VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable: VkBool32 = 0
            pTessellationState: const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState: const VkPipelineViewportStateCreateInfo* = 00000047B9FEDC08:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:               const void* = NULL
                flags: VkPipelineViewportStateCreateFlags = 0
                viewportCount:          uint32_t = 1
                pViewports:    const VkViewport* = UNUSED
                scissorCount:           uint32_t = 1
                pScissors:       const VkRect2D* = UNUSED
            pRasterizationState: const VkPipelineRasterizationStateCreateInfo* = 00000047B9FEDC60:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:               const void* = NULL
                flags: VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:       VkBool32 = 0
                rasterizerDiscardEnable: VkBool32 = 0
                polygonMode:       VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:        VkCullModeFlags = 1 (VK_CULL_MODE_FRONT_BIT)
                frontFace:           VkFrontFace = VK_FRONT_FACE_CLOCKWISE (1)
                depthBiasEnable:        VkBool32 = 0
                depthBiasConstantFactor:   float = 0
                depthBiasClamp:            float = 0
                depthBiasSlopeFactor:      float = 0
                lineWidth:                 float = 1
            pMultisampleState: const VkPipelineMultisampleStateCreateInfo* = 00000047B9FEDCB8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:               const void* = NULL
                flags: VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples: VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:    VkBool32 = 0
                minSampleShading:          float = 1
                pSampleMask: const VkSampleMask* = NULL
                alphaToCoverageEnable:  VkBool32 = 0
                alphaToOneEnable:       VkBool32 = 0
            pDepthStencilState: const VkPipelineDepthStencilStateCreateInfo* = 00000047B9FEDDA0:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:               const void* = NULL
                flags: VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:        VkBool32 = 1
                depthWriteEnable:       VkBool32 = 1
                depthCompareOp:      VkCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL (3)
                depthBoundsTestEnable:  VkBool32 = 0
                stencilTestEnable:      VkBool32 = 0
                front:          VkStencilOpState = 00000047B9FEDDC8:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                back:           VkStencilOpState = 00000047B9FEDDE4:
                    failOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:              VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:           VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:            uint32_t = 0
                    writeMask:              uint32_t = 0
                    reference:              uint32_t = 0
                minDepthBounds:            float = 0
                maxDepthBounds:            float = 0
            pColorBlendState: const VkPipelineColorBlendStateCreateInfo* = 00000047B9FEDD48:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:               const void* = NULL
                flags: VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:          VkBool32 = 0
                logicOp:               VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount:        uint32_t = 1
                pAttachments: const VkPipelineColorBlendAttachmentState* = 00000047B9FEDD08
                    pAttachments[0]: const VkPipelineColorBlendAttachmentState = 00000047B9FEDD08:
                        blendEnable:            VkBool32 = 0
                        srcColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstColorBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ONE (1)
                        dstAlphaBlendFactor: VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:          VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask: VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:         float[4] = 00000047B9FEDD70
                    blendConstants[0]:         float = 0
                    blendConstants[1]:         float = 0
                    blendConstants[2]:         float = 0
                    blendConstants[3]:         float = 0
            pDynamicState: const VkPipelineDynamicStateCreateInfo* = 00000047B9FEDBC8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (27)
                pNext:               const void* = NULL
                flags: VkPipelineDynamicStateCreateFlags = 0
                dynamicStateCount:      uint32_t = 3
                pDynamicStates: const VkDynamicState* = 00000047B9FEDB98
                    pDynamicStates[0]: const VkDynamicState = VK_DYNAMIC_STATE_VIEWPORT (0)
                    pDynamicStates[1]: const VkDynamicState = VK_DYNAMIC_STATE_SCISSOR (1)
                    pDynamicStates[2]: const VkDynamicState = VK_DYNAMIC_STATE_STENCIL_REFERENCE (8)
            layout:         VkPipelineLayout = FBBAE800000000A2
            renderPass:         VkRenderPass = 0000000000000000
            subpass:                uint32_t = 0
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = -1
        pNext: VkPipelineRenderingCreateInfo = 00000047B9FEDE28:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO (1000044002)
            pNext:               const void* = NULL
            viewMask:               uint32_t = 0
            colorAttachmentCount:   uint32_t = 0
            pColorAttachmentFormats: const VkFormat* = 00000047B9FEDE68
            depthAttachmentFormat:  VkFormat = VK_FORMAT_D32_SFLOAT (126)
            stencilAttachmentFormat: VkFormat = VK_FORMAT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A7490E40
        pPipelines[0]:        VkPipeline = E4607E00000000A4

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = F9DDB900000000A3
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE340:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16_SFLOAT (83)
        extent:               VkExtent3D = 00000047B9FEE35C:
            width:                  uint32_t = 512
            height:                 uint32_t = 512
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 14 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = F0EB3400000000A5

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEE340:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16_SFLOAT (83)
        extent:               VkExtent3D = 00000047B9FEE35C:
            width:                  uint32_t = 512
            height:                 uint32_t = 512
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 14 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 054FEF00000000A6

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 054FEF00000000A6
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEE178:
        size:               VkDeviceSize = 1048576
        alignment:          VkDeviceSize = 4096
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 054FEF00000000A6
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 23875584

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE410:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 054FEF00000000A6
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16_SFLOAT (83)
        components:   VkComponentMapping = 00000047B9FEE438:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE448:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = EA035600000000A7

Thread 0, Frame 0:
vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkDescriptorSetLayoutCreateInfo* = 00000047B9FEDB60:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (32)
        pNext:               const void* = NULL
        flags: VkDescriptorSetLayoutCreateFlags = 0
        bindingCount:           uint32_t = 1
        pBindings: const VkDescriptorSetLayoutBinding* = 00000047B9FEDE90
            pBindings[0]: const VkDescriptorSetLayoutBinding = 00000047B9FEDE90:
                binding:                uint32_t = 0
                descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE (3)
                descriptorCount:        uint32_t = 1
                stageFlags:   VkShaderStageFlags = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                pImmutableSamplers: const VkSampler* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pSetLayout: VkDescriptorSetLayout* = E9D45100000000A8

Thread 0, Frame 0:
vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkPipelineLayoutCreateInfo* = 00000047B9FEE108:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (30)
        pNext:               const void* = NULL
        flags: VkPipelineLayoutCreateFlags = 0
        setLayoutCount:         uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE0A8
            pSetLayouts[0]: const VkDescriptorSetLayout = E9D45100000000A8
        pushConstantRangeCount: uint32_t = 0
        pPushConstantRanges: const VkPushConstantRange* = NULL
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelineLayout: VkPipelineLayout* = 0F799000000000A9

Thread 0, Frame 0:
vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkShaderModuleCreateInfo* = 00000047B9FEE2E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (16)
        pNext:               const void* = NULL
        flags: VkShaderModuleCreateFlags = 0
        codeSize:                 size_t = 18124
        pCode:           const uint32_t* = SHADER DATA
    pAllocator: const VkAllocationCallbacks* = NULL
    pShaderModule:   VkShaderModule* = D0E29300000000AA

Thread 0, Frame 0:
vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pipelineCache:   VkPipelineCache = 0000000000000000
    createInfoCount:        uint32_t = 1
    pCreateInfos: const VkComputePipelineCreateInfo* = 00000047B9FEE5B0
        pCreateInfos[0]: const VkComputePipelineCreateInfo = 00000047B9FEE5B0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (29)
            pNext:               const void* = NULL
            flags:     VkPipelineCreateFlags = 0
            stage: VkPipelineShaderStageCreateInfo = 00000047B9FEE5C8:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                pNext:               const void* = NULL
                flags: VkPipelineShaderStageCreateFlags = 0
                stage:     VkShaderStageFlagBits = 32 (VK_SHADER_STAGE_COMPUTE_BIT)
                module:           VkShaderModule = D0E29300000000AA
                pName:               const char* = "main"
                pSpecializationInfo: const VkSpecializationInfo* = NULL
            layout:         VkPipelineLayout = 0F799000000000A9
            basePipelineHandle:   VkPipeline = 0000000000000000
            basePipelineIndex:       int32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pPipelines:          VkPipeline* = 000001A5A7489B20
        pPipelines[0]:        VkPipeline = ED367200000000AB

Thread 0, Frame 0:
vkDestroyShaderModule(device, shaderModule, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    shaderModule:     VkShaderModule = D0E29300000000AA
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE5B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE558
            pSetLayouts[0]: const VkDescriptorSetLayout = E9D45100000000A8
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEE5F8
        pDescriptorSets[0]: VkDescriptorSet = 0B8B3500000000AC

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE320
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE320:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 0B8B3500000000AC
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_IMAGE (3)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEE520
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEE520:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = EA035600000000A7
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_GENERAL (1)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73CB0D8
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 2048 (VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC300
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC550
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEC550:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_GENERAL (1)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 054FEF00000000A6
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC580:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73CB0D8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:             VkPipeline = ED367200000000AB

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73CB0D8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:         VkPipelineLayout = 0F799000000000A9
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE6E8
        pDescriptorSets[0]: const VkDescriptorSet = 0B8B3500000000AC
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73CB0D8
    groupCountX:            uint32_t = 512
    groupCountY:            uint32_t = 512
    groupCountZ:            uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73CB0D8
    srcStageMask: VkPipelineStageFlags = 2048 (VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)
    dstStageMask: VkPipelineStageFlags = 8192 (VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC300
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC550
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEC550:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_GENERAL (1)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 054FEF00000000A6
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC580:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkSemaphoreCreateInfo* = 00000047B9FED518:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:               const void* = VkSemaphoreTypeCreateInfo
        flags:    VkSemaphoreCreateFlags = 0
        pNext: VkSemaphoreTypeCreateInfo = 00000047B9FED4D8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:               const void* = NULL
            semaphoreType:   VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:           uint64_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSemaphore:         VkSemaphore* = C9CCFC00000000AD

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FED1B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 4
        usage:        VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = E7713700000000AE

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = E7713700000000AE
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED228:
        size:               VkDeviceSize = 64
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 00000047B9FECD50:
        memoryTypeCount:        uint32_t = 3
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000047B9FECD54
            memoryTypes[0]:     VkMemoryType = 00000047B9FECD54:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[1]:     VkMemoryType = 00000047B9FECD5C:
                propertyFlags: VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[2]:     VkMemoryType = 00000047B9FECD64:
                propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:              uint32_t = 0
        memoryHeapCount:        uint32_t = 1
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000047B9FECE58
            memoryHeaps[0]:     VkMemoryHeap = 00000047B9FECE58:
                size:               VkDeviceSize = 8428105728
                flags:         VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkMemoryAllocateInfo* = 00000047B9FED258:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:               const void* = NULL
        allocationSize:     VkDeviceSize = 64
        memoryTypeIndex:        uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory:         VkDeviceMemory* = 10DA6E00000000AF

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = 10DA6E00000000AF
    offset:             VkDeviceSize = 0
    size:               VkDeviceSize = 18446744073709551615
    flags:          VkMemoryMapFlags = 0
    ppData:                   void** = 000001A5A4220000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = E7713700000000AE
    memory:           VkDeviceMemory = 10DA6E00000000AF
    memoryOffset:       VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FED1B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 4
        usage:        VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = C4BEC900000000B0

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = C4BEC900000000B0
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED228:
        size:               VkDeviceSize = 64
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 00000047B9FECD50:
        memoryTypeCount:        uint32_t = 3
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000047B9FECD54
            memoryTypes[0]:     VkMemoryType = 00000047B9FECD54:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[1]:     VkMemoryType = 00000047B9FECD5C:
                propertyFlags: VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[2]:     VkMemoryType = 00000047B9FECD64:
                propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:              uint32_t = 0
        memoryHeapCount:        uint32_t = 1
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000047B9FECE58
            memoryHeaps[0]:     VkMemoryHeap = 00000047B9FECE58:
                size:               VkDeviceSize = 8428105728
                flags:         VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkMemoryAllocateInfo* = 00000047B9FED258:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:               const void* = NULL
        allocationSize:     VkDeviceSize = 64
        memoryTypeIndex:        uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory:         VkDeviceMemory* = 9B139800000000B1

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = 9B139800000000B1
    offset:             VkDeviceSize = 0
    size:               VkDeviceSize = 18446744073709551615
    flags:          VkMemoryMapFlags = 0
    ppData:                   void** = 000001A5A4230000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = C4BEC900000000B0
    memory:           VkDeviceMemory = 9B139800000000B1
    memoryOffset:       VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED180:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
        extent:               VkExtent3D = 00000047B9FED19C:
            width:                  uint32_t = 2400
            height:                 uint32_t = 1200
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 6 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 1DC49B00000000B2

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED180:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
        extent:               VkExtent3D = 00000047B9FED19C:
            width:                  uint32_t = 2400
            height:                 uint32_t = 1200
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 6 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = DF8AAA00000000B3

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = DF8AAA00000000B3
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FECFB8:
        size:               VkDeviceSize = 46694400
        alignment:          VkDeviceSize = 4096
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkMemoryAllocateInfo* = 00000047B9FEBFC8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:               const void* = NULL
        allocationSize:     VkDeviceSize = 134217728
        memoryTypeIndex:        uint32_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory:         VkDeviceMemory* = 90D1CD00000000B4

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = DF8AAA00000000B3
    memory:           VkDeviceMemory = 90D1CD00000000B4
    memoryOffset:       VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73A9F98
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEAF10
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEB160
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEB160:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = DF8AAA00000000B3
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB190:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = D10D270000000018
    offset:             VkDeviceSize = 0
    size:               VkDeviceSize = 18446744073709551615
    flags:          VkMemoryMapFlags = 0
    ppData:                   void** = 000001A5ADD70000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = D10D270000000018

Thread 0, Frame 0:
vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73A9F98
    srcBuffer:              VkBuffer = 84C0580000000017
    dstImage:                VkImage = DF8AAA00000000B3
    dstImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:            uint32_t = 1
    pRegions: const VkBufferImageCopy* = 00000047B9FED1B8
        pRegions[0]: const VkBufferImageCopy = 00000047B9FED1B8:
            bufferOffset:       VkDeviceSize = 16
            bufferRowLength:        uint32_t = 0
            bufferImageHeight:      uint32_t = 0
            imageSubresource: VkImageSubresourceLayers = 00000047B9FED1C8:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 0
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
            imageOffset:          VkOffset3D = 00000047B9FED1D8:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            imageExtent:          VkExtent3D = 00000047B9FED1E4:
                width:                  uint32_t = 2400
                height:                 uint32_t = 1200
                depth:                  uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73A9F98
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 128 (VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEAF10
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEB160
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEB160:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = DF8AAA00000000B3
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB190:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED250:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = DF8AAA00000000B3
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R32G32B32A32_SFLOAT (109)
        components:   VkComponentMapping = 00000047B9FED278:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED288:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 1C252400000000B5

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = D10D270000000018
    offset:             VkDeviceSize = 0
    size:               VkDeviceSize = 18446744073709551615
    flags:          VkMemoryMapFlags = 0
    ppData:                   void** = 000001A5ADD70000

Thread 0, Frame 0:
vkUnmapMemory(device, memory) returns void:
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = D10D270000000018

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73A9F98
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = 27D60E0000000019
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED158
        pRegions[0]:  const VkBufferCopy = 00000047B9FED158:
            srcOffset:          VkDeviceSize = 46080016
            dstOffset:          VkDeviceSize = 0
            size:               VkDeviceSize = 768

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A73A9F98

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED160
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED160:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A73A9F98
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED160
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED160:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED108:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED0E8
                pSignalSemaphoreValues[0]: const uint64_t = 1
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED188:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED168
            pValues[0]:       const uint64_t = 1
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 2
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
        pCommandBuffers[1]: const VkCommandBuffer = 000001A5A73A9F98

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED188:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED148:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = D10D270000000018
    offset:             VkDeviceSize = 0
    size:               VkDeviceSize = 18446744073709551615
    flags:          VkMemoryMapFlags = 0
    ppData:                   void** = 000001A5ADD70000

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = 95A125000000001A
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED148
        pRegions[0]:  const VkBufferCopy = 00000047B9FED148:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 0
            size:               VkDeviceSize = 144

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED150
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED150:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED150
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED150:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED0F8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED0D8
                pSignalSemaphoreValues[0]: const uint64_t = 2
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED178:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED158
            pValues[0]:       const uint64_t = 2
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED178:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED138:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = 27D60E0000000019
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED158
        pRegions[0]:  const VkBufferCopy = 00000047B9FED158:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 768
            size:               VkDeviceSize = 128

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED160
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED160:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED160
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED160:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED108:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED0E8
                pSignalSemaphoreValues[0]: const uint64_t = 3
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED188:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED168
            pValues[0]:       const uint64_t = 3
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED188:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED148:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = 95A125000000001A
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED148
        pRegions[0]:  const VkBufferCopy = 00000047B9FED148:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 144
            size:               VkDeviceSize = 24

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED150
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED150:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED150
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED150:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED0F8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED0D8
                pSignalSemaphoreValues[0]: const uint64_t = 4
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED178:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED158
            pValues[0]:       const uint64_t = 4
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED178:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED138:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FED3A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 1280
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = DB987F00000000B6

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = DB987F00000000B6
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED1E8:
        size:               VkDeviceSize = 1280
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = DB987F00000000B6
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83902976

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FED3A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 1536
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 95FF2600000000B7

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 95FF2600000000B7
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED1E8:
        size:               VkDeviceSize = 1536
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 95FF2600000000B7
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83904256

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 5EB05E000000003B
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = 95FF2600000000B7
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 128
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 9F9B41000000003C
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = 95FF2600000000B7
                    offset:             VkDeviceSize = 256
                    range:              VkDeviceSize = 128
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 59FFE0000000003D
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = 95FF2600000000B7
                    offset:             VkDeviceSize = 512
                    range:              VkDeviceSize = 128
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 5C5283000000003E
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = 95FF2600000000B7
                    offset:             VkDeviceSize = 768
                    range:              VkDeviceSize = 128
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 808562000000003F
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = 95FF2600000000B7
                    offset:             VkDeviceSize = 1024
                    range:              VkDeviceSize = 128
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 56C9BD0000000040
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = 95FF2600000000B7
                    offset:             VkDeviceSize = 1280
                    range:              VkDeviceSize = 128
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 9389C50000000061
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = DB987F00000000B6
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 4
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 1D4E2E0000000062
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = DB987F00000000B6
                    offset:             VkDeviceSize = 256
                    range:              VkDeviceSize = 4
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 5EF3070000000063
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = DB987F00000000B6
                    offset:             VkDeviceSize = 512
                    range:              VkDeviceSize = 4
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 9F58380000000064
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = DB987F00000000B6
                    offset:             VkDeviceSize = 768
                    range:              VkDeviceSize = 4
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1D0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 5DBCF90000000065
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FED330
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FED330:
                    buffer:                 VkBuffer = DB987F00000000B6
                    offset:             VkDeviceSize = 1024
                    range:              VkDeviceSize = 4
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A73CB0D8
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FED4F0
        pViewports[0]:  const VkViewport = 00000047B9FED4F0:
            x:                         float = 0
            y:                         float = 512
            width:                     float = 512
            height:                    float = -512
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1E0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 210D07000000003A
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FED3E0
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FED3E0:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 1C252400000000B5
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1E0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 210D07000000003A
            dstBinding:             uint32_t = 1
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FED3E0
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FED3E0:
                    sampler:               VkSampler = A21A4E0000000030
                    imageView:           VkImageView = 0000000000000000
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1E0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 7F79AD0000000050
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FED3E0
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FED3E0:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 535B660000000043
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FED1E0
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FED1E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 7F79AD0000000050
            dstBinding:             uint32_t = 1
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FED3E0
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FED3E0:
                    sampler:               VkSampler = A21A4E0000000030
                    imageView:           VkImageView = 0000000000000000
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 128
            height:                 uint32_t = 128
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 2602C100000000B8

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 128
            height:                 uint32_t = 128
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = D6C9A000000000B9

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = D6C9A000000000B9
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED0D8:
        size:               VkDeviceSize = 790656
        alignment:          VkDeviceSize = 65536
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = D6C9A000000000B9
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 24969216

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED370:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_CUBE (3)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED398:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED3A8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 6
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 84AD8300000000BA

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 2860E200000000BB

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 2DF7C500000000BC

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED1A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED1C8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED1D8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 8F9A6C00000000BD

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 2EC10700000000BE

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 2D15FE00000000BF

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 88693900000000C0

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 64
            height:                 uint32_t = 64
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 35EE6900000000C1

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 64
            height:                 uint32_t = 64
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 27138A00000000C2

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 27138A00000000C2
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED0D8:
        size:               VkDeviceSize = 196608
        alignment:          VkDeviceSize = 4096
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 27138A00000000C2
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 25763840

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED370:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_CUBE (3)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED398:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED3A8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 6
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = B6389B00000000C3

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 3A9C5C00000000C4

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 3B715500000000C5

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = BDE60E00000000C6

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = BFAB3700000000C7

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 3EB07000000000C8

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = BA04B100000000C9

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 32
            height:                 uint32_t = 32
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = BB79F200000000CA

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 32
            height:                 uint32_t = 32
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 359E9300000000CB

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 359E9300000000CB
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED0D8:
        size:               VkDeviceSize = 49152
        alignment:          VkDeviceSize = 4096
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 359E9300000000CB
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 19083264

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED370:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_CUBE (3)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED398:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED3A8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 6
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = A0235400000000CC

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED1A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED1C8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED1D8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = B527DD00000000CD

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 0AF31600000000CE

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = AA4E0F00000000CF

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = AD092800000000D0

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 0FB4F900000000D1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = AC9FBA00000000D2

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 16
            height:                 uint32_t = 16
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = AAFB8B00000000D3

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 16
            height:                 uint32_t = 16
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 0A56AC00000000D4

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 0A56AC00000000D4
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED0D8:
        size:               VkDeviceSize = 12288
        alignment:          VkDeviceSize = 4096
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 0A56AC00000000D4
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 17866752

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED370:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_CUBE (3)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED398:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED3A8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 6
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 5581C500000000D5

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = A7CC1E00000000D6

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 14170700000000D7

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 58E3E000000000D8

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 9B5EC100000000D9

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED1A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED1C8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED1D8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 1E386200000000DA

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 5FC58300000000DB

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 8
            height:                 uint32_t = 8
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 9C8EEB00000000DC

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FED2A0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 16 (VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT)
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FED2BC:
            width:                  uint32_t = 8
            height:                 uint32_t = 8
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 6
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 18EA4A00000000DD

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 18EA4A00000000DD
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED0D8:
        size:               VkDeviceSize = 8192
        alignment:          VkDeviceSize = 4096
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 18EA4A00000000DD
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 17879040

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED370:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_CUBE (3)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED398:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED3A8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 6
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 5B275900000000DE

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 91B01800000000DF

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 67DD1700000000E0

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 55064E00000000E1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 88D2B500000000E2

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 6CAFFC00000000E3

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FED2D0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FED2F8:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FED308:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 5128B300000000E4

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED358:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 00000047B9FED398
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A76D6478

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED388:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C47A0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A76E04B8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A76E04B8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED348:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED428:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C47A0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED3E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 8FD57200000000E5

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 944A2C0000000039

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 512
                height:                 uint32_t = 512
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 8FD57200000000E5
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 512
            width:                     float = 512
            height:                    float = -512
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 512
                height:                 uint32_t = 512

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EB05E000000003B
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 210D07000000003A
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 6D7DD100000000E6

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 944A2C0000000039

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 512
                height:                 uint32_t = 512
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 6D7DD100000000E6
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 512
            width:                     float = 512
            height:                    float = -512
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 512
                height:                 uint32_t = 512

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F9B41000000003C
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 210D07000000003A
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECD40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECD68:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECD78:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 68D91000000000E7

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 944A2C0000000039

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 512
                height:                 uint32_t = 512
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 68D91000000000E7
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 512
            width:                     float = 512
            height:                    float = -512
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 512
                height:                 uint32_t = 512

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 59FFE0000000003D
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 210D07000000003A
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 84341F00000000E8

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 944A2C0000000039

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 512
                height:                 uint32_t = 512
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 84341F00000000E8
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 512
            width:                     float = 512
            height:                    float = -512
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 512
                height:                 uint32_t = 512

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5C5283000000003E
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 210D07000000003A
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 71A35600000000E9

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 944A2C0000000039

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 512
                height:                 uint32_t = 512
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 71A35600000000E9
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 512
            width:                     float = 512
            height:                    float = -512
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 512
                height:                 uint32_t = 512

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 808562000000003F
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 210D07000000003A
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 89E60F0000000042
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 67EECD00000000EA

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 944A2C0000000039

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 512
                height:                 uint32_t = 512
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 67EECD00000000EA
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 512
            width:                     float = 512
            height:                    float = -512
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 512
                height:                 uint32_t = 512

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 56C9BD0000000040
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 9638F80000000036
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 210D07000000003A
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 7675B400000000EB

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 7
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[1]: const VkImageMemoryBarrier = 00000047B9FEAE68:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE98:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[2]: const VkImageMemoryBarrier = 00000047B9FEAEB0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAEE0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[3]: const VkImageMemoryBarrier = 00000047B9FEAEF8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAF28:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[4]: const VkImageMemoryBarrier = 00000047B9FEAF40:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAF70:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[5]: const VkImageMemoryBarrier = 00000047B9FEAF88:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 89E60F0000000042
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAFB8:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[6]: const VkImageMemoryBarrier = 00000047B9FEAFD0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 72303F0000000052
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB000:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 7CD292000000004F

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 7675B400000000EB
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EB05E000000003B
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 7AC17B00000000EC

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 72303F0000000052
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 7CD292000000004F

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 7AC17B00000000EC
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F9B41000000003C
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 7CBCBA00000000ED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 72303F0000000052
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 7CD292000000004F

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 7CBCBA00000000ED
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 59FFE0000000003D
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 705BC900000000EE

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 72303F0000000052
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 7CD292000000004F

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 705BC900000000EE
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5C5283000000003E
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 7FE62800000000EF

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 72303F0000000052
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 7CD292000000004F

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 7FE62800000000EF
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 808562000000003F
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 72303F0000000052
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 7E6D0700000000F0

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 72303F0000000052
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 7CD292000000004F

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 7E6D0700000000F0
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 56C9BD0000000040
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 45D6D1000000004C
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECD40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECD68:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECD78:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 7AC9DE00000000F1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 128
                height:                 uint32_t = 128
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 7AC9DE00000000F1
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 128
            width:                     float = 128
            height:                    float = -128
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 128
                height:                 uint32_t = 128

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EB05E000000003B
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9389C50000000061
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 4304C500000000F2

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 128
                height:                 uint32_t = 128
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 4304C500000000F2
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 128
            width:                     float = 128
            height:                    float = -128
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 128
                height:                 uint32_t = 128

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F9B41000000003C
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9389C50000000061
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 70526C00000000F3

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 128
                height:                 uint32_t = 128
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 70526C00000000F3
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 128
            width:                     float = 128
            height:                    float = -128
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 128
                height:                 uint32_t = 128

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 59FFE0000000003D
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9389C50000000061
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 67FF8300000000F4

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 128
                height:                 uint32_t = 128
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 67FF8300000000F4
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 128
            width:                     float = 128
            height:                    float = -128
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 128
                height:                 uint32_t = 128

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5C5283000000003E
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9389C50000000061
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 4964E200000000F5

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 128
                height:                 uint32_t = 128
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 4964E200000000F5
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 128
            width:                     float = 128
            height:                    float = -128
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 128
                height:                 uint32_t = 128

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 808562000000003F
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9389C50000000061
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = D6C9A000000000B9
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 0A304100000000F6

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 128
                height:                 uint32_t = 128
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 0A304100000000F6
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 128
            width:                     float = 128
            height:                    float = -128
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 128
                height:                 uint32_t = 128

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 56C9BD0000000040
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9389C50000000061
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 628D6100000000F7

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 64
                height:                 uint32_t = 64
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 628D6100000000F7
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 64
            width:                     float = 64
            height:                    float = -64
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 64
                height:                 uint32_t = 64

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EB05E000000003B
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 1D4E2E0000000062
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 714A0E00000000F8

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 64
                height:                 uint32_t = 64
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 714A0E00000000F8
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 64
            width:                     float = 64
            height:                    float = -64
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 64
                height:                 uint32_t = 64

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F9B41000000003C
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 1D4E2E0000000062
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 0FF7E700000000F9

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 64
                height:                 uint32_t = 64
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 0FF7E700000000F9
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 64
            width:                     float = 64
            height:                    float = -64
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 64
                height:                 uint32_t = 64

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 59FFE0000000003D
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 1D4E2E0000000062
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 695C5C00000000FA

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 64
                height:                 uint32_t = 64
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 695C5C00000000FA
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 64
            width:                     float = 64
            height:                    float = -64
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 64
                height:                 uint32_t = 64

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5C5283000000003E
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 1D4E2E0000000062
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECD40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECD68:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECD78:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 6AB8A500000000FB

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 64
                height:                 uint32_t = 64
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 6AB8A500000000FB
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 64
            width:                     float = 64
            height:                    float = -64
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 64
                height:                 uint32_t = 64

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 808562000000003F
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 1D4E2E0000000062
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 27138A00000000C2
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 02158A00000000FC

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 64
                height:                 uint32_t = 64
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 02158A00000000FC
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 64
            width:                     float = 64
            height:                    float = -64
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 64
                height:                 uint32_t = 64

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 56C9BD0000000040
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 1D4E2E0000000062
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 5142AB00000000FD

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 5142AB00000000FD
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EB05E000000003B
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EF3070000000063
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 678F7800000000FE

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 678F7800000000FE
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F9B41000000003C
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EF3070000000063
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 18543900000000FF

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 18543900000000FF
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 59FFE0000000003D
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EF3070000000063
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 5B26F60000000100

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 5B26F60000000100
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5C5283000000003E
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EF3070000000063
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 629A2F0000000101

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 629A2F0000000101
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 808562000000003F
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EF3070000000063
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 359E9300000000CB
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 1E7D540000000102

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 1E7D540000000102
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 32
            width:                     float = 32
            height:                    float = -32
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 32
                height:                 uint32_t = 32

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 56C9BD0000000040
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EF3070000000063
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 5F00DD0000000103

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 16
                height:                 uint32_t = 16
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 5F00DD0000000103
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 16
            width:                     float = 16
            height:                    float = -16
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 16
                height:                 uint32_t = 16

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EB05E000000003B
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F58380000000064
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 984B920000000104

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 16
                height:                 uint32_t = 16
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 984B920000000104
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 16
            width:                     float = 16
            height:                    float = -16
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 16
                height:                 uint32_t = 16

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F9B41000000003C
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F58380000000064
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECD40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECD68:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECD78:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 1CAE930000000105

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 16
                height:                 uint32_t = 16
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 1CAE930000000105
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 16
            width:                     float = 16
            height:                    float = -16
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 16
                height:                 uint32_t = 16

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 59FFE0000000003D
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F58380000000064
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 42E2B00000000106

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 16
                height:                 uint32_t = 16
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 42E2B00000000106
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 16
            width:                     float = 16
            height:                    float = -16
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 16
                height:                 uint32_t = 16

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5C5283000000003E
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F58380000000064
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 9675F10000000107

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 16
                height:                 uint32_t = 16
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 9675F10000000107
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 16
            width:                     float = 16
            height:                    float = -16
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 16
                height:                 uint32_t = 16

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 808562000000003F
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F58380000000064
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 0A56AC00000000D4
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 27983E0000000108

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 16
                height:                 uint32_t = 16
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 27983E0000000108
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 16
            width:                     float = 16
            height:                    float = -16
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 16
                height:                 uint32_t = 16

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 56C9BD0000000040
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F58380000000064
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 4943770000000109

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 8
                height:                 uint32_t = 8
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 4943770000000109
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 8
            width:                     float = 8
            height:                    float = -8
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 8
                height:                 uint32_t = 8

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5EB05E000000003B
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5DBCF90000000065
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 1
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 94162C000000010A

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 8
                height:                 uint32_t = 8
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 94162C000000010A
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 8
            width:                     float = 8
            height:                    float = -8
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 8
                height:                 uint32_t = 8

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 9F9B41000000003C
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5DBCF90000000065
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 2
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 20EAD5000000010B

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 8
                height:                 uint32_t = 8
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 20EAD5000000010B
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 8
            width:                     float = 8
            height:                    float = -8
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 8
                height:                 uint32_t = 8

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 59FFE0000000003D
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5DBCF90000000065
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 3
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 4D6D9A000000010C

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 8
                height:                 uint32_t = 8
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 4D6D9A000000010C
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 8
            width:                     float = 8
            height:                    float = -8
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 8
                height:                 uint32_t = 8

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5C5283000000003E
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5DBCF90000000065
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 4
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 8E119B000000010D

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 8
                height:                 uint32_t = 8
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 8E119B000000010D
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 8
            width:                     float = 8
            height:                    float = -8
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 8
                height:                 uint32_t = 8

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 808562000000003F
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5DBCF90000000065
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FECE70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 18EA4A00000000DD
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FECE98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FECEA8:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 5
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 293AE8000000010E

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = 44349C0000000060

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FECE30:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FECE44:
            offset:               VkOffset2D = 00000047B9FECE44:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECE4C:
                width:                  uint32_t = 8
                height:                 uint32_t = 8
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FECC50
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FECC50:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = 293AE8000000010E
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FECC84 (Union):
                    color:         VkClearColorValue = 00000047B9FECC84 (Union):
                        float32:                float[4] = 00000047B9FECC84
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FECC84
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FECC84
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FECC84:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = NULL
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FECE10
        pViewports[0]:  const VkViewport = 00000047B9FECE10:
            x:                         float = 0
            y:                         float = 8
            width:                     float = 8
            height:                    float = -8
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FECDF0
        pScissors[0]:     const VkRect2D = 00000047B9FECDF0:
            offset:               VkOffset2D = 00000047B9FECDF0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FECDF8:
                width:                  uint32_t = 8
                height:                 uint32_t = 8

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720BCA0
        pBuffers[0]:      const VkBuffer = 27D60E0000000019
    pOffsets:    const VkDeviceSize* = 00000047B9FECE88
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    buffer:                 VkBuffer = 95A125000000001A
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 56C9BD0000000040
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 5DBCF90000000065
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = 4256C1000000005D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FECE58
        pDescriptorSets[0]: const VkDescriptorSet = 7F79AD0000000050
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 0
    vertexOffset:            int32_t = 0
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 31
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEAE20:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE50:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[1]: const VkImageMemoryBarrier = 00000047B9FEAE68:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAE98:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[2]: const VkImageMemoryBarrier = 00000047B9FEAEB0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAEE0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[3]: const VkImageMemoryBarrier = 00000047B9FEAEF8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAF28:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[4]: const VkImageMemoryBarrier = 00000047B9FEAF40:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAF70:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[5]: const VkImageMemoryBarrier = 00000047B9FEAF88:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = D6C9A000000000B9
            subresourceRange: VkImageSubresourceRange = 00000047B9FEAFB8:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[6]: const VkImageMemoryBarrier = 00000047B9FEAFD0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB000:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[7]: const VkImageMemoryBarrier = 00000047B9FEB018:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB048:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[8]: const VkImageMemoryBarrier = 00000047B9FEB060:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB090:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[9]: const VkImageMemoryBarrier = 00000047B9FEB0A8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB0D8:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[10]: const VkImageMemoryBarrier = 00000047B9FEB0F0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB120:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[11]: const VkImageMemoryBarrier = 00000047B9FEB138:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 27138A00000000C2
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB168:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[12]: const VkImageMemoryBarrier = 00000047B9FEB180:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB1B0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[13]: const VkImageMemoryBarrier = 00000047B9FEB1C8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB1F8:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[14]: const VkImageMemoryBarrier = 00000047B9FEB210:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB240:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[15]: const VkImageMemoryBarrier = 00000047B9FEB258:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB288:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[16]: const VkImageMemoryBarrier = 00000047B9FEB2A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB2D0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[17]: const VkImageMemoryBarrier = 00000047B9FEB2E8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 359E9300000000CB
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB318:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[18]: const VkImageMemoryBarrier = 00000047B9FEB330:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB360:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[19]: const VkImageMemoryBarrier = 00000047B9FEB378:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB3A8:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[20]: const VkImageMemoryBarrier = 00000047B9FEB3C0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB3F0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[21]: const VkImageMemoryBarrier = 00000047B9FEB408:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB438:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[22]: const VkImageMemoryBarrier = 00000047B9FEB450:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB480:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[23]: const VkImageMemoryBarrier = 00000047B9FEB498:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 0A56AC00000000D4
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB4C8:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[24]: const VkImageMemoryBarrier = 00000047B9FEB4E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB510:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[25]: const VkImageMemoryBarrier = 00000047B9FEB528:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB558:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 1
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[26]: const VkImageMemoryBarrier = 00000047B9FEB570:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB5A0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 2
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[27]: const VkImageMemoryBarrier = 00000047B9FEB5B8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB5E8:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 3
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[28]: const VkImageMemoryBarrier = 00000047B9FEB600:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB630:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 4
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[29]: const VkImageMemoryBarrier = 00000047B9FEB648:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 2048 (VK_ACCESS_TRANSFER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 18EA4A00000000DD
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB678:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 5
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[30]: const VkImageMemoryBarrier = 00000047B9FEB690:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 85798B0000000067
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB6C0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 5
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcImage:                VkImage = D6C9A000000000B9
    srcImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                VkImage = 85798B0000000067
    dstImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:            uint32_t = 1
    pRegions:     const VkImageCopy* = 00000047B9FECCF0
        pRegions[0]:   const VkImageCopy = 00000047B9FECCF0:
            srcSubresource: VkImageSubresourceLayers = 00000047B9FECCF0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 0
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            srcOffset:            VkOffset3D = 00000047B9FECD00:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            dstSubresource: VkImageSubresourceLayers = 00000047B9FECD0C:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 0
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            dstOffset:            VkOffset3D = 00000047B9FECD1C:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            extent:               VkExtent3D = 00000047B9FECD28:
                width:                  uint32_t = 128
                height:                 uint32_t = 128
                depth:                  uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 0
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcImage:                VkImage = 27138A00000000C2
    srcImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                VkImage = 85798B0000000067
    dstImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:            uint32_t = 1
    pRegions:     const VkImageCopy* = 00000047B9FECCF0
        pRegions[0]:   const VkImageCopy = 00000047B9FECCF0:
            srcSubresource: VkImageSubresourceLayers = 00000047B9FECCF0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 0
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            srcOffset:            VkOffset3D = 00000047B9FECD00:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            dstSubresource: VkImageSubresourceLayers = 00000047B9FECD0C:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            dstOffset:            VkOffset3D = 00000047B9FECD1C:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            extent:               VkExtent3D = 00000047B9FECD28:
                width:                  uint32_t = 64
                height:                 uint32_t = 64
                depth:                  uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 0
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcImage:                VkImage = 359E9300000000CB
    srcImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                VkImage = 85798B0000000067
    dstImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:            uint32_t = 1
    pRegions:     const VkImageCopy* = 00000047B9FECCF0
        pRegions[0]:   const VkImageCopy = 00000047B9FECCF0:
            srcSubresource: VkImageSubresourceLayers = 00000047B9FECCF0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 0
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            srcOffset:            VkOffset3D = 00000047B9FECD00:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            dstSubresource: VkImageSubresourceLayers = 00000047B9FECD0C:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 2
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            dstOffset:            VkOffset3D = 00000047B9FECD1C:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            extent:               VkExtent3D = 00000047B9FECD28:
                width:                  uint32_t = 32
                height:                 uint32_t = 32
                depth:                  uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 0
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcImage:                VkImage = 0A56AC00000000D4
    srcImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                VkImage = 85798B0000000067
    dstImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:            uint32_t = 1
    pRegions:     const VkImageCopy* = 00000047B9FECCF0
        pRegions[0]:   const VkImageCopy = 00000047B9FECCF0:
            srcSubresource: VkImageSubresourceLayers = 00000047B9FECCF0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 0
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            srcOffset:            VkOffset3D = 00000047B9FECD00:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            dstSubresource: VkImageSubresourceLayers = 00000047B9FECD0C:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 3
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            dstOffset:            VkOffset3D = 00000047B9FECD1C:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            extent:               VkExtent3D = 00000047B9FECD28:
                width:                  uint32_t = 16
                height:                 uint32_t = 16
                depth:                  uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEABD0
    imageMemoryBarrierCount: uint32_t = 0
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEAE20

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcImage:                VkImage = 18EA4A00000000DD
    srcImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL (6)
    dstImage:                VkImage = 85798B0000000067
    dstImageLayout:    VkImageLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL (7)
    regionCount:            uint32_t = 1
    pRegions:     const VkImageCopy* = 00000047B9FECCF0
        pRegions[0]:   const VkImageCopy = 00000047B9FECCF0:
            srcSubresource: VkImageSubresourceLayers = 00000047B9FECCF0:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 0
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            srcOffset:            VkOffset3D = 00000047B9FECD00:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            dstSubresource: VkImageSubresourceLayers = 00000047B9FECD0C:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                mipLevel:               uint32_t = 4
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6
            dstOffset:            VkOffset3D = 00000047B9FECD1C:
                x:                       int32_t = 0
                y:                       int32_t = 0
                z:                       int32_t = 0
            extent:               VkExtent3D = 00000047B9FECD28:
                width:                  uint32_t = 8
                height:                 uint32_t = 8
                depth:                  uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    dstBuffer:              VkBuffer = E7713700000000AE
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEB1C0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEB410
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEB410:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 64 (VK_ACCESS_SHADER_WRITE_BIT)
            dstAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 72303F0000000052
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB440:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68
    srcStageMask: VkPipelineStageFlags = 4096 (VK_PIPELINE_STAGE_TRANSFER_BIT)
    dstStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEB1C0
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEB410
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEB410:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 4096 (VK_ACCESS_TRANSFER_WRITE_BIT)
            dstAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 85798B0000000067
            subresourceRange: VkImageSubresourceRange = 00000047B9FEB440:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 5
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 6

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED2B0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED2B0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A74C47A0
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A76EEF68
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED2B0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED2B0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A748A660
                pSignalSemaphores[0]: const VkSemaphore = C9CCFC00000000AD
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED258:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED238
                pSignalSemaphoreValues[0]: const uint64_t = 1
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED568:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A748A660
            pSemaphores[0]: const VkSemaphore = C9CCFC00000000AD
        pValues:         const uint64_t* = 00000047B9FED548
            pValues[0]:       const uint64_t = 1
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = CAD092000000000D
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A74C47A0
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEF048:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 3520000
        usage:        VkBufferUsageFlags = 130 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 2C9FC9000000010F

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 2C9FC9000000010F
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEEE88:
        size:               VkDeviceSize = 3520000
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 2C9FC9000000010F
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 25960448

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEF048:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 480000
        usage:        VkBufferUsageFlags = 66 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 80F3660000000110

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 80F3660000000110
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEEE88:
        size:               VkDeviceSize = 480000
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 80F3660000000110
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 29480448

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = 80F3660000000110
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FEF128
        pRegions[0]:  const VkBufferCopy = 00000047B9FEF128:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 0
            size:               VkDeviceSize = 480000

Thread 0, Frame 0:
vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkSemaphoreCreateInfo* = 00000047B9FEDEB8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (9)
        pNext:               const void* = VkSemaphoreTypeCreateInfo
        flags:    VkSemaphoreCreateFlags = 0
        pNext: VkSemaphoreTypeCreateInfo = 00000047B9FEDE78:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO (1000207002)
            pNext:               const void* = NULL
            semaphoreType:   VkSemaphoreType = VK_SEMAPHORE_TYPE_TIMELINE (1)
            initialValue:           uint64_t = 0
    pAllocator: const VkAllocationCallbacks* = NULL
    pSemaphore:         VkSemaphore* = 35643F0000000111

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDB58:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 4
        usage:        VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 27A9E40000000112

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 27A9E40000000112
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDBC8:
        size:               VkDeviceSize = 64
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 00000047B9FED6F0:
        memoryTypeCount:        uint32_t = 3
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000047B9FED6F4
            memoryTypes[0]:     VkMemoryType = 00000047B9FED6F4:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[1]:     VkMemoryType = 00000047B9FED6FC:
                propertyFlags: VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[2]:     VkMemoryType = 00000047B9FED704:
                propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:              uint32_t = 0
        memoryHeapCount:        uint32_t = 1
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000047B9FED7F8
            memoryHeaps[0]:     VkMemoryHeap = 00000047B9FED7F8:
                size:               VkDeviceSize = 8428105728
                flags:         VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkMemoryAllocateInfo* = 00000047B9FEDBF8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:               const void* = NULL
        allocationSize:     VkDeviceSize = 64
        memoryTypeIndex:        uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory:         VkDeviceMemory* = B9B24E0000000113

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = B9B24E0000000113
    offset:             VkDeviceSize = 0
    size:               VkDeviceSize = 18446744073709551615
    flags:          VkMemoryMapFlags = 0
    ppData:                   void** = 000001A5A4240000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 27A9E40000000112
    memory:           VkDeviceMemory = B9B24E0000000113
    memoryOffset:       VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDB58:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 4
        usage:        VkBufferUsageFlags = 2 (VK_BUFFER_USAGE_TRANSFER_DST_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 3307610000000114

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 3307610000000114
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDBC8:
        size:               VkDeviceSize = 64
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) returns void:
    physicalDevice: VkPhysicalDevice = 000001A5A2346D80
    pMemoryProperties: VkPhysicalDeviceMemoryProperties* = 00000047B9FED6F0:
        memoryTypeCount:        uint32_t = 3
        memoryTypes: VkMemoryType[VK_MAX_MEMORY_TYPES] = 00000047B9FED6F4
            memoryTypes[0]:     VkMemoryType = 00000047B9FED6F4:
                propertyFlags: VkMemoryPropertyFlags = 1 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[1]:     VkMemoryType = 00000047B9FED6FC:
                propertyFlags: VkMemoryPropertyFlags = 7 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)
                heapIndex:              uint32_t = 0
            memoryTypes[2]:     VkMemoryType = 00000047B9FED704:
                propertyFlags: VkMemoryPropertyFlags = 15 (VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT)
                heapIndex:              uint32_t = 0
        memoryHeapCount:        uint32_t = 1
        memoryHeaps: VkMemoryHeap[VK_MAX_MEMORY_HEAPS] = 00000047B9FED7F8
            memoryHeaps[0]:     VkMemoryHeap = 00000047B9FED7F8:
                size:               VkDeviceSize = 8428105728
                flags:         VkMemoryHeapFlags = 1 (VK_MEMORY_HEAP_DEVICE_LOCAL_BIT)

Thread 0, Frame 0:
vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkMemoryAllocateInfo* = 00000047B9FEDBF8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (5)
        pNext:               const void* = NULL
        allocationSize:     VkDeviceSize = 64
        memoryTypeIndex:        uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pMemory:         VkDeviceMemory* = 20FB800000000115

Thread 0, Frame 0:
vkMapMemory(device, memory, offset, size, flags, ppData) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    memory:           VkDeviceMemory = 20FB800000000115
    offset:             VkDeviceSize = 0
    size:               VkDeviceSize = 18446744073709551615
    flags:          VkMemoryMapFlags = 0
    ppData:                   void** = 000001A5A4250000

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 3307610000000114
    memory:           VkDeviceMemory = 20FB800000000115
    memoryOffset:       VkDeviceSize = 0

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FED968:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 1172
        usage:        VkBufferUsageFlags = 131 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = BC9CA30000000116

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = BC9CA30000000116
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FED7A8:
        size:               VkDeviceSize = 1216
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = BC9CA30000000116
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 19079296

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 27D60E0000000019
    dstBuffer:              VkBuffer = BC9CA30000000116
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FEDAB8
        pRegions[0]:  const VkBufferCopy = 00000047B9FEDAB8:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 0
            size:               VkDeviceSize = 1024

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEDA50
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEDA50:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEDA50
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEDA50:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED9F8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED9D8
                pSignalSemaphoreValues[0]: const uint64_t = 5
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FEDA78:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FEDA58
            pValues[0]:       const uint64_t = 5
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDA78:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEDA38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FEDAA8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7012490
            pSemaphores[0]: const VkSemaphore = 9FDE6B0000000014
        pValues:         const uint64_t* = 00000047B9FEDA88
            pValues[0]:       const uint64_t = 0
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 27D60E0000000019
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = BC9CA30000000116
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FEDA68
        pRegions[0]:  const VkBufferCopy = 00000047B9FEDA68:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 896
            size:               VkDeviceSize = 128

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEDA70
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEDA70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEDA70
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEDA70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FEDA18:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED9F8
                pSignalSemaphoreValues[0]: const uint64_t = 6
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FEDA98:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FEDA78
            pValues[0]:       const uint64_t = 6
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDA98:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEDA58:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = 95A125000000001A
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FEDB08
        pRegions[0]:  const VkBufferCopy = 00000047B9FEDB08:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 168
            size:               VkDeviceSize = 24

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEDB10
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEDB10:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEDB10
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEDB10:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FEDAB8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FEDA98
                pSignalSemaphoreValues[0]: const uint64_t = 7
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FEDB38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FEDB18
            pValues[0]:       const uint64_t = 7
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDB38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEDAF8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDD38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 110592
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 3F21420000000117

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 3F21420000000117
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDB78:
        size:               VkDeviceSize = 110592
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 3F21420000000117
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 29960448

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDD38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 691200
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 3E2A2D0000000118

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 3E2A2D0000000118
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDB78:
        size:               VkDeviceSize = 691200
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 3E2A2D0000000118
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 30071040

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDD38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 13824
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = B28F040000000119

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = B28F040000000119
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDB78:
        size:               VkDeviceSize = 13824
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = B28F040000000119
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 5134208

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDD38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 1600
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = C0C03F000000011A

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = C0C03F000000011A
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDB78:
        size:               VkDeviceSize = 1600
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = C0C03F000000011A
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83905792

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDD38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 55296
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 341746000000011B

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 341746000000011B
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDB78:
        size:               VkDeviceSize = 55296
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 341746000000011B
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 30762240

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEDC40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:               VkExtent3D = 00000047B9FEDC5C:
            width:                  uint32_t = 1920
            height:                 uint32_t = 1080
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = A7BAA9000000011C

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEDC40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        extent:               VkExtent3D = 00000047B9FEDC5C:
            width:                  uint32_t = 1920
            height:                 uint32_t = 1080
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 36 (VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = C5A188000000011D

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = C5A188000000011D
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDA78:
        size:               VkDeviceSize = 9433216
        alignment:          VkDeviceSize = 65536
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = C5A188000000011D
    memory:           VkDeviceMemory = 90D1CD00000000B4
    memoryOffset:       VkDeviceSize = 46727168

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEDD10:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = C5A188000000011D
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:   VkComponentMapping = 00000047B9FEDD38:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEDD48:
            aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 32749B000000011E

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEDC70:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = C5A188000000011D
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:   VkComponentMapping = 00000047B9FEDC98:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEDCA8:
            aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = A2C85A000000011F

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEDC40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FEDC5C:
            width:                  uint32_t = 1920
            height:                 uint32_t = 1080
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = CC8FD50000000120

Thread 0, Frame 0:
vkCreateImage(device, pCreateInfo, pAllocator, pImage) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageCreateInfo* = 00000047B9FEDC40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (14)
        pNext:               const void* = NULL
        flags:        VkImageCreateFlags = 0
        imageType:           VkImageType = VK_IMAGE_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        extent:               VkExtent3D = 00000047B9FEDC5C:
            width:                  uint32_t = 1920
            height:                 uint32_t = 1080
            depth:                  uint32_t = 1
        mipLevels:              uint32_t = 1
        arrayLayers:            uint32_t = 1
        samples:   VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
        tiling:            VkImageTiling = VK_IMAGE_TILING_OPTIMAL (0)
        usage:         VkImageUsageFlags = 21 (VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
        initialLayout:     VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
    pAllocator: const VkAllocationCallbacks* = NULL
    pImage:                 VkImage* = 08320C0000000121

Thread 0, Frame 0:
vkGetImageMemoryRequirements(device, image, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 08320C0000000121
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDA78:
        size:               VkDeviceSize = 16777344
        alignment:          VkDeviceSize = 65536
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindImageMemory(device, image, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    image:                   VkImage = 08320C0000000121
    memory:           VkDeviceMemory = 90D1CD00000000B4
    memoryOffset:       VkDeviceSize = 56164352

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEDD10:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 08320C0000000121
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEDD38:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEDD48:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = AD19770000000122

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEDB40:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 08320C0000000121
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEDB68:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEDB78:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = D27C3E0000000123

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDD38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 4
        usage:        VkBufferUsageFlags = 34 (VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 02D0F10000000124

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 02D0F10000000124
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDB78:
        size:               VkDeviceSize = 64
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 02D0F10000000124
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 19080512

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDD48:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 464
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = D507B00000000125

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = D507B00000000125
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDB88:
        size:               VkDeviceSize = 512
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = D507B00000000125
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83907392

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = A182620000000079
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = D84B930000000126

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = C25F26000000009C
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = 0590D20000000127

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = EC25C90000000093
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = D365DD0000000128

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = D84B930000000126
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = D507B00000000125
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 464
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 0590D20000000127
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = D507B00000000125
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 464
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = D365DD0000000128
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = D507B00000000125
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 464
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDD48:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 464
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = A2D9140000000129

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = A2D9140000000129
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDB88:
        size:               VkDeviceSize = 512
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = A2D9140000000129
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83907904

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = A182620000000079
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = 1EBE0F000000012A

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = C25F26000000009C
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = DF43F6000000012B

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = EC25C90000000093
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = 9C08B9000000012C

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 1EBE0F000000012A
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = A2D9140000000129
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 464
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = DF43F6000000012B
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = A2D9140000000129
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 464
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 9C08B9000000012C
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = A2D9140000000129
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 464
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FEDD48:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 464
        usage:        VkBufferUsageFlags = 16 (VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 136D78000000012D

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 136D78000000012D
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FEDB88:
        size:               VkDeviceSize = 512
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 136D78000000012D
    memory:           VkDeviceMemory = D10D270000000018
    memoryOffset:       VkDeviceSize = 83908416

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = A182620000000079
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = C2A18A000000012E

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = C25F26000000009C
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = 9636EB000000012F

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = EC25C90000000093
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = 175B440000000130

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C2A18A000000012E
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 136D78000000012D
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 464
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 9636EB000000012F
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 136D78000000012D
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 464
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 175B440000000130
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER (6)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 136D78000000012D
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 464
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = E9B2EE0000000094
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = C5801D0000000131

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB80
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB80:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEDD80
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEDD80:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = EA035600000000A7
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB80
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB80:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 1
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEDD80
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEDD80:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 02A7F70000000053
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB80
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB80:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 2
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEDD80
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEDD80:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 5684940000000068
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB80
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB80:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 3
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEDD80
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEDD80:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 421A0F0000000074
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 4
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 341746000000011B
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 55296
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 5
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = C0C03F000000011A
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 1600
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 6
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 3E2A2D0000000118
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 691200
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB80
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB80:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 7
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEDD80
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEDD80:
                    sampler:               VkSampler = A21A4E0000000030
                    imageView:           VkImageView = 0000000000000000
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB80
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB80:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 8
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEDD80
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEDD80:
                    sampler:               VkSampler = A21A4E0000000030
                    imageView:           VkImageView = 0000000000000000
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB80
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB80:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = C5801D0000000131
            dstBinding:             uint32_t = 9
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLER (0)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEDD80
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEDD80:
                    sampler:               VkSampler = 4FAC1C0000000032
                    imageView:           VkImageView = 0000000000000000
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = E2478B00000000A1
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = 9055060000000132

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 9055060000000132
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = C0C03F000000011A
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 1600
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 9055060000000132
            dstBinding:             uint32_t = 1
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 02D0F10000000124
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 4
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = 3F36830000000078
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = ED362F0000000133

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = ED362F0000000133
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 3F21420000000117
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 110592
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = B3C7BC000000007F
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = CEA1400000000134

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB80
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB80:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = CEA1400000000134
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEDD80
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEDD80:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 32749B000000011E
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = CEA1400000000134
            dstBinding:             uint32_t = 1
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 3E2A2D0000000118
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 13824
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = A6B6CD0000000086
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = 8E6CA10000000135

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 8E6CA10000000135
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 3E2A2D0000000118
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 13824
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 8E6CA10000000135
            dstBinding:             uint32_t = 1
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = A808D50000000033
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 4
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = 8E6CA10000000135
            dstBinding:             uint32_t = 2
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = B28F040000000119
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 13824
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEDE18:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEDDB8
            pSetLayouts[0]: const VkDescriptorSetLayout = E0601F000000008D
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEDE58
        pDescriptorSets[0]: VkDescriptorSet = EDF7820000000136

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = EDF7820000000136
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 3F21420000000117
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 32
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = EDF7820000000136
            dstBinding:             uint32_t = 1
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = B28F040000000119
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 13824
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = EDF7820000000136
            dstBinding:             uint32_t = 2
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = C0C03F000000011A
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 1600
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = EDF7820000000136
            dstBinding:             uint32_t = 3
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = A808D50000000033
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 8
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = EDF7820000000136
            dstBinding:             uint32_t = 4
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 3E2A2D0000000118
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 691200
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEDB70
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEDB70:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = EDF7820000000136
            dstBinding:             uint32_t = 5
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER (7)
            pImageInfo: const VkDescriptorImageInfo* = UNUSED
            pBufferInfo: const VkDescriptorBufferInfo* = 00000047B9FEDCD0
                pBufferInfo[0]: const VkDescriptorBufferInfo = 00000047B9FEDCD0:
                    buffer:                 VkBuffer = 341746000000011B
                    offset:             VkDeviceSize = 0
                    range:              VkDeviceSize = 55296
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDE38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 00000047B9FEDE78
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A76EEF68

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDE38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 00000047B9FEDE78
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A77805F8

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDE38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D5B26F0000000010
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 00000047B9FEDE78
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A778E648

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDE38:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D5B26F0000000010
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 00000047B9FEDE78
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A77990E8

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDE68:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C3CB0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A77A3B88

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A77A3B88
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEDE28:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDE68:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C46C0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A77AE628

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A77AE628
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEDE28:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDE68:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D5B26F0000000010
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C4AB0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A77C10D8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A77C10D8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEDE28:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEDE68:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D5B26F0000000010
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C53E0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A77CBB78

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A77CBB78
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEDE28:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FED0D8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 262216
        usage:        VkBufferUsageFlags = 131 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = F042A30000000137

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = F042A30000000137
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FECF18:
        size:               VkDeviceSize = 262272
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = F042A30000000137
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 30817536

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = BC9CA30000000116
    dstBuffer:              VkBuffer = F042A30000000137
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED228
        pRegions[0]:  const VkBufferCopy = 00000047B9FED228:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 0
            size:               VkDeviceSize = 1172

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1C0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1C0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1C0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1C0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED168:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED148
                pSignalSemaphoreValues[0]: const uint64_t = 8
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED1E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED1C8
            pValues[0]:       const uint64_t = 8
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED1E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED1A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED218:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7012490
            pSemaphores[0]: const VkSemaphore = 9FDE6B0000000014
        pValues:         const uint64_t* = 00000047B9FED1F8
            pValues[0]:       const uint64_t = 0
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = BC9CA30000000116
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = F042A30000000137
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED1D8
        pRegions[0]:  const VkBufferCopy = 00000047B9FED1D8:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 1024
            size:               VkDeviceSize = 261024

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1E0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1E0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED188:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED168
                pSignalSemaphoreValues[0]: const uint64_t = 9
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED208:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED1E8
            pValues[0]:       const uint64_t = 9
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED208:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED1C8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FED0C8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 189972
        usage:        VkBufferUsageFlags = 67 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = 84BE4C0000000138

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 84BE4C0000000138
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FECF08:
        size:               VkDeviceSize = 190016
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 84BE4C0000000138
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 31079808

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 95A125000000001A
    dstBuffer:              VkBuffer = 84BE4C0000000138
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED218
        pRegions[0]:  const VkBufferCopy = 00000047B9FED218:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 0
            size:               VkDeviceSize = 1024

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1B0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1B0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1B0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1B0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED158:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED138
                pSignalSemaphoreValues[0]: const uint64_t = 10
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED1D8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED1B8
            pValues[0]:       const uint64_t = 10
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED1D8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED198:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED208:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7012490
            pSemaphores[0]: const VkSemaphore = 9FDE6B0000000014
        pValues:         const uint64_t* = 00000047B9FED1E8
            pValues[0]:       const uint64_t = 0
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = 95A125000000001A
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = 84BE4C0000000138
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED1C8
        pRegions[0]:  const VkBufferCopy = 00000047B9FED1C8:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 192
            size:               VkDeviceSize = 188928

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1D0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1D0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1D0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED178:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED158
                pSignalSemaphoreValues[0]: const uint64_t = 11
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED1F8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED1D8
            pValues[0]:       const uint64_t = 11
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED1F8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED1B8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkBufferCreateInfo* = 00000047B9FED0D8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (12)
        pNext:               const void* = NULL
        flags:       VkBufferCreateFlags = 0
        size:               VkDeviceSize = 263004
        usage:        VkBufferUsageFlags = 131 (VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT)
        sharingMode:       VkSharingMode = VK_SHARING_MODE_EXCLUSIVE (0)
        queueFamilyIndexCount:  uint32_t = 0
        pQueueFamilyIndices: const uint32_t* = UNUSED
    pAllocator: const VkAllocationCallbacks* = NULL
    pBuffer:               VkBuffer* = F6D9250000000139

Thread 0, Frame 0:
vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = F6D9250000000139
    pMemoryRequirements: VkMemoryRequirements* = 00000047B9FECF18:
        size:               VkDeviceSize = 263040
        alignment:          VkDeviceSize = 64
        memoryTypeBits:         uint32_t = 7

Thread 0, Frame 0:
vkBindBufferMemory(device, buffer, memory, memoryOffset) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = F6D9250000000139
    memory:           VkDeviceMemory = EC4BEC000000000B
    memoryOffset:       VkDeviceSize = 31269824

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = F042A30000000137
    dstBuffer:              VkBuffer = F6D9250000000139
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED228
        pRegions[0]:  const VkBufferCopy = 00000047B9FED228:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 0
            size:               VkDeviceSize = 262216

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1C0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1C0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1C0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1C0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED168:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED148
                pSignalSemaphoreValues[0]: const uint64_t = 12
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED1E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED1C8
            pValues[0]:       const uint64_t = 12
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED1E8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED1A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED218:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7012490
            pSemaphores[0]: const VkSemaphore = 9FDE6B0000000014
        pValues:         const uint64_t* = 00000047B9FED1F8
            pValues[0]:       const uint64_t = 0
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkDestroyBuffer(device, buffer, pAllocator) returns void:
    device:                 VkDevice = 000001A5A2365D98
    buffer:                 VkBuffer = F042A30000000137
    pAllocator: const VkAllocationCallbacks* = NULL

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = F6D9250000000139
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED1D8
        pRegions[0]:  const VkBufferCopy = 00000047B9FED1D8:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 262048
            size:               VkDeviceSize = 768

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1E0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED1E0
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED1E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED188:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED168
                pSignalSemaphoreValues[0]: const uint64_t = 13
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED208:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED1E8
            pValues[0]:       const uint64_t = 13
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED208:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED1C8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    srcBuffer:              VkBuffer = 84C0580000000017
    dstBuffer:              VkBuffer = 84BE4C0000000138
    regionCount:            uint32_t = 1
    pRegions:    const VkBufferCopy* = 00000047B9FED278
        pRegions[0]:  const VkBufferCopy = 00000047B9FED278:
            srcOffset:          VkDeviceSize = 0
            dstOffset:          VkDeviceSize = 189120
            size:               VkDeviceSize = 144

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED280
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED280:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A7206200
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FED280
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FED280:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = VkTimelineSemaphoreSubmitInfo
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 0
            pCommandBuffers: const VkCommandBuffer* = NULL
            signalSemaphoreCount:   uint32_t = 1
            pSignalSemaphores: const VkSemaphore* = 000001A5A7013930
                pSignalSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pNext: VkTimelineSemaphoreSubmitInfo = 00000047B9FED228:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO (1000207003)
            pNext:               const void* = NULL
            waitSemaphoreValueCount: uint32_t = 0
            pWaitSemaphoreValues: const uint64_t* = NULL
            signalSemaphoreValueCount: uint32_t = 1
            pSignalSemaphoreValues: const uint64_t* = 00000047B9FED208
                pSignalSemaphoreValues[0]: const uint64_t = 14
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkWaitSemaphoresKHR(device, pWaitInfo, timeout) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pWaitInfo: const VkSemaphoreWaitInfo* = 00000047B9FED2A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO (1000207004)
        pNext:               const void* = NULL
        flags:      VkSemaphoreWaitFlags = 0
        semaphoreCount:         uint32_t = 1
        pSemaphores:  const VkSemaphore* = 000001A5A7013930
            pSemaphores[0]: const VkSemaphore = DD3A8A0000000015
        pValues:         const uint64_t* = 00000047B9FED288
            pValues[0]:       const uint64_t = 14
    timeout:                uint64_t = 18446744073709551615

Thread 0, Frame 0:
vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) returns void:
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    commandBufferCount:     uint32_t = 1
    pCommandBuffers: const VkCommandBuffer* = 000001A5A2025C00
        pCommandBuffers[0]: const VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkResetCommandPool(device, commandPool, flags) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    commandPool:       VkCommandPool = D175B40000000013
    flags:   VkCommandPoolResetFlags = 1 (VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT)

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FED2A8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D175B40000000013
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A7206200
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A739F4F8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A739F4F8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FED268:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkDescriptorSetAllocateInfo* = 00000047B9FEE9C8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (34)
        pNext:               const void* = NULL
        descriptorPool: VkDescriptorPool = D897D90000000016
        descriptorSetCount:     uint32_t = 1
        pSetLayouts: const VkDescriptorSetLayout* = 00000047B9FEE968
            pSetLayouts[0]: const VkDescriptorSetLayout = 8F5F070000000095
    pDescriptorSets: VkDescriptorSet* = 00000047B9FEEA08
        pDescriptorSets[0]: VkDescriptorSet = F6641E000000013A

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE730
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE730:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = F6641E000000013A
            dstBinding:             uint32_t = 0
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEE930
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEE930:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 44695A0000000071
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE730
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE730:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = F6641E000000013A
            dstBinding:             uint32_t = 1
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEE930
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEE930:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 44695A0000000071
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE730
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE730:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = F6641E000000013A
            dstBinding:             uint32_t = 2
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEE930
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEE930:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 44695A0000000071
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) returns void:
    device:                 VkDevice = 000001A5A2365D98
    descriptorWriteCount:   uint32_t = 1
    pDescriptorWrites: const VkWriteDescriptorSet* = 00000047B9FEE730
        pDescriptorWrites[0]: const VkWriteDescriptorSet = 00000047B9FEE730:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (35)
            pNext:               const void* = NULL
            dstSet:          VkDescriptorSet = F6641E000000013A
            dstBinding:             uint32_t = 3
            dstArrayElement:        uint32_t = 0
            descriptorCount:        uint32_t = 1
            descriptorType: VkDescriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE (2)
            pImageInfo: const VkDescriptorImageInfo* = 00000047B9FEE930
                pImageInfo[0]: const VkDescriptorImageInfo = 00000047B9FEE930:
                    sampler:               VkSampler = 0000000000000000
                    imageView:           VkImageView = 44695A0000000071
                    imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            pBufferInfo: const VkDescriptorBufferInfo* = UNUSED
            pTexelBufferView: const VkBufferView* = UNUSED
    descriptorCopyCount:    uint32_t = 0
    pDescriptorCopies: const VkCopyDescriptorSet* = NULL

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEEDA8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C3CB0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A7BAAC38

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEED68:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEEDA8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = CAD092000000000D
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C46C0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A127DBC8

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEED68:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEEDA8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D5B26F0000000010
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C4AB0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A7D3B018

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A7D3B018
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEED68:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pAllocateInfo: const VkCommandBufferAllocateInfo* = 00000047B9FEEDA8:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (40)
        pNext:               const void* = NULL
        commandPool:       VkCommandPool = D5B26F0000000010
        level:      VkCommandBufferLevel = VK_COMMAND_BUFFER_LEVEL_PRIMARY (0)
        commandBufferCount:     uint32_t = 1
    pCommandBuffers: VkCommandBuffer* = 000001A5A74C53E0
        pCommandBuffers[0]: VkCommandBuffer = 000001A5A7D4D068

Thread 0, Frame 0:
vkBeginCommandBuffer(commandBuffer, pBeginInfo) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pBeginInfo: const VkCommandBufferBeginInfo* = 00000047B9FEED68:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (42)
        pNext:               const void* = NULL
        flags: VkCommandBufferUsageFlags = 4 (VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT)
        pInheritanceInfo: const VkCommandBufferInheritanceInfo* = UNUSED

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D3B018
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 2048 (VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 1
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC6E0
        pBufferMemoryBarriers[0]: const VkBufferMemoryBarrier = 00000047B9FEC6E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 64 (VK_ACCESS_SHADER_WRITE_BIT)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            buffer:                 VkBuffer = 3F21420000000117
            offset:             VkDeviceSize = 0
            size:               VkDeviceSize = 110592
    imageMemoryBarrierCount: uint32_t = 0
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC930

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D3B018
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:             VkPipeline = B8A507000000007C

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D3B018
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:         VkPipelineLayout = B3FFC1000000007A
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE9A8
        pDescriptorSets[0]: const VkDescriptorSet = D84B930000000126
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D3B018
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:         VkPipelineLayout = B3FFC1000000007A
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE9A8
        pDescriptorSets[0]: const VkDescriptorSet = ED362F0000000133
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D3B018
    groupCountX:            uint32_t = 16
    groupCountY:            uint32_t = 9
    groupCountZ:            uint32_t = 24

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D3B018
    dstBuffer:              VkBuffer = 3307610000000114
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 3

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE7F0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = C5A188000000011D
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:   VkComponentMapping = 00000047B9FEE818:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE828:
            aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = 85EF67000000013B

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC550
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC7A0
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEC7A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 1024 (VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = C5A188000000011D
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC7D0:
                aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = FC68DD000000009F

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FEE7B0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FEE7C4:
            offset:               VkOffset2D = 00000047B9FEE7C4:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE7CC:
                width:                  uint32_t = 1920
                height:                 uint32_t = 1080
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 0
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FEE5D0
        pDepthAttachment: const VkRenderingAttachmentInfo* = 00000047B9FEE820:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
            pNext:               const void* = NULL
            imageView:           VkImageView = 85EF67000000013B
            imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
            resolveImageView:    VkImageView = 0000000000000000
            resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
            storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
            clearValue:         VkClearValue = 00000047B9FEE854 (Union):
                color:         VkClearColorValue = 00000047B9FEE854 (Union):
                    float32:                float[4] = 00000047B9FEE854
                        float32[0]:                float = 1
                        float32[1]:                float = 1
                        float32[2]:                float = 1
                        float32[3]:                float = 1
                    int32:                int32_t[4] = 00000047B9FEE854
                        int32[0]:                int32_t = 1065353216
                        int32[1]:                int32_t = 1065353216
                        int32[2]:                int32_t = 1065353216
                        int32[3]:                int32_t = 1065353216
                    uint32:              uint32_t[4] = 00000047B9FEE854
                        uint32[0]:              uint32_t = 1065353216
                        uint32[1]:              uint32_t = 1065353216
                        uint32[2]:              uint32_t = 1065353216
                        uint32[3]:              uint32_t = 1065353216
                depthStencil: VkClearDepthStencilValue = 00000047B9FEE854:
                    depth:                     float = 1
                    stencil:                uint32_t = 1065353216
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FEE6E0
        pViewports[0]:  const VkViewport = 00000047B9FEE6E0:
            x:                         float = 0
            y:                         float = 1080
            width:                     float = 1920
            height:                    float = -1080
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FEE6C0
        pScissors[0]:     const VkRect2D = 00000047B9FEE6C0:
            offset:               VkOffset2D = 00000047B9FEE6C0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE6C8:
                width:                  uint32_t = 1920
                height:                 uint32_t = 1080

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = FB320F000000009D
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE728
        pDescriptorSets[0]: const VkDescriptorSet = 0590D20000000127
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720E320
        pBuffers[0]:      const VkBuffer = F6D9250000000139
    pOffsets:    const VkDeviceSize* = 00000047B9FEE758
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    buffer:                 VkBuffer = 84BE4C0000000138
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = FB320F000000009D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE758
        pDescriptorSets[0]: const VkDescriptorSet = 2E2941000000001F
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE880
        pDynamicOffsets[0]: const uint32_t = 1024

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 47280
    vertexOffset:            int32_t = 8189
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = FB320F000000009D
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE758
        pDescriptorSets[0]: const VkDescriptorSet = 2E2941000000001F
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE880
        pDynamicOffsets[0]: const uint32_t = 768

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    indexCount:             uint32_t = 47232
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 48
    vertexOffset:            int32_t = 32
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE7F0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = B6BEE80000000073
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_D32_SFLOAT (126)
        components:   VkComponentMapping = 00000047B9FEE818:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE828:
            aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = F34A48000000013C

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC550
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC7A0
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEC7A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 1024 (VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = B6BEE80000000073
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC7D0:
                aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FEE7B0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FEE7C4:
            offset:               VkOffset2D = 00000047B9FEE7C4:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE7CC:
                width:                  uint32_t = 1024
                height:                 uint32_t = 1024
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 0
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FEE5D0
        pDepthAttachment: const VkRenderingAttachmentInfo* = 00000047B9FEE820:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
            pNext:               const void* = NULL
            imageView:           VkImageView = F34A48000000013C
            imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
            resolveImageView:    VkImageView = 0000000000000000
            resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
            storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
            clearValue:         VkClearValue = 00000047B9FEE854 (Union):
                color:         VkClearColorValue = 00000047B9FEE854 (Union):
                    float32:                float[4] = 00000047B9FEE854
                        float32[0]:                float = 1
                        float32[1]:                float = 1
                        float32[2]:                float = 1
                        float32[3]:                float = 1
                    int32:                int32_t[4] = 00000047B9FEE854
                        int32[0]:                int32_t = 1065353216
                        int32[1]:                int32_t = 1065353216
                        int32[2]:                int32_t = 1065353216
                        int32[3]:                int32_t = 1065353216
                    uint32:              uint32_t[4] = 00000047B9FEE854
                        uint32[0]:              uint32_t = 1065353216
                        uint32[1]:              uint32_t = 1065353216
                        uint32[2]:              uint32_t = 1065353216
                        uint32[3]:              uint32_t = 1065353216
                depthStencil: VkClearDepthStencilValue = 00000047B9FEE854:
                    depth:                     float = 1
                    stencil:                uint32_t = 1065353216
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC550
    imageMemoryBarrierCount: uint32_t = 0
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC7A0

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FEE7B0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FEE7C4:
            offset:               VkOffset2D = 00000047B9FEE7C4:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE7CC:
                width:                  uint32_t = 1024
                height:                 uint32_t = 1024
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 0
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FEE5D0
        pDepthAttachment: const VkRenderingAttachmentInfo* = 00000047B9FEE820:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
            pNext:               const void* = NULL
            imageView:           VkImageView = F34A48000000013C
            imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
            resolveImageView:    VkImageView = 0000000000000000
            resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
            storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
            clearValue:         VkClearValue = 00000047B9FEE854 (Union):
                color:         VkClearColorValue = 00000047B9FEE854 (Union):
                    float32:                float[4] = 00000047B9FEE854
                        float32[0]:                float = 1
                        float32[1]:                float = 1
                        float32[2]:                float = 1
                        float32[3]:                float = 1
                    int32:                int32_t[4] = 00000047B9FEE854
                        int32[0]:                int32_t = 1065353216
                        int32[1]:                int32_t = 1065353216
                        int32[2]:                int32_t = 1065353216
                        int32[3]:                int32_t = 1065353216
                    uint32:              uint32_t[4] = 00000047B9FEE854
                        uint32[0]:              uint32_t = 1065353216
                        uint32[1]:              uint32_t = 1065353216
                        uint32[2]:              uint32_t = 1065353216
                        uint32[3]:              uint32_t = 1065353216
                depthStencil: VkClearDepthStencilValue = 00000047B9FEE854:
                    depth:                     float = 1
                    stencil:                uint32_t = 1065353216
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 0
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC550
    imageMemoryBarrierCount: uint32_t = 0
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC7A0

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = E4607E00000000A4

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FEE540
        pViewports[0]:  const VkViewport = 00000047B9FEE540:
            x:                         float = 0
            y:                         float = 512
            width:                     float = 512
            height:                    float = -512
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = FBBAE800000000A2
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE588
        pDescriptorSets[0]: const VkDescriptorSet = 9055060000000132
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FEE520
        pScissors[0]:     const VkRect2D = 00000047B9FEE520:
            offset:               VkOffset2D = 00000047B9FEE520:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE528:
                width:                  uint32_t = 512
                height:                 uint32_t = 512

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FEE400:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FEE414:
            offset:               VkOffset2D = 00000047B9FEE414:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE41C:
                width:                  uint32_t = 512
                height:                 uint32_t = 512
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 0
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FEE220
        pDepthAttachment: const VkRenderingAttachmentInfo* = 00000047B9FEE470:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
            pNext:               const void* = NULL
            imageView:           VkImageView = 33F7660000000075
            imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
            resolveImageView:    VkImageView = 0000000000000000
            resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
            storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
            clearValue:         VkClearValue = 00000047B9FEE4A4 (Union):
                color:         VkClearColorValue = 00000047B9FEE4A4 (Union):
                    float32:                float[4] = 00000047B9FEE4A4
                        float32[0]:                float = 1
                        float32[1]:                float = 1
                        float32[2]:                float = 1
                        float32[3]:                float = 1
                    int32:                int32_t[4] = 00000047B9FEE4A4
                        int32[0]:                int32_t = 1065353216
                        int32[1]:                int32_t = 1065353216
                        int32[2]:                int32_t = 1065353216
                        int32[3]:                int32_t = 1065353216
                    uint32:              uint32_t[4] = 00000047B9FEE4A4
                        uint32[0]:              uint32_t = 1065353216
                        uint32[1]:              uint32_t = 1065353216
                        uint32[2]:              uint32_t = 1065353216
                        uint32[3]:              uint32_t = 1065353216
                depthStencil: VkClearDepthStencilValue = 00000047B9FEE4A4:
                    depth:                     float = 1
                    stencil:                uint32_t = 1065353216
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = FBBAE800000000A2
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE5B8
        pDescriptorSets[0]: const VkDescriptorSet = 2E2941000000001F
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE6E0
        pDynamicOffsets[0]: const uint32_t = 1024

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 47280
    vertexOffset:            int32_t = 8189
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = FBBAE800000000A2
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE5B8
        pDescriptorSets[0]: const VkDescriptorSet = 2E2941000000001F
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE6E0
        pDynamicOffsets[0]: const uint32_t = 768

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    indexCount:             uint32_t = 47232
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 48
    vertexOffset:            int32_t = 32
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FEE540
        pViewports[0]:  const VkViewport = 00000047B9FEE540:
            x:                         float = 512
            y:                         float = 512
            width:                     float = 512
            height:                    float = -512
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = FBBAE800000000A2
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE588
        pDescriptorSets[0]: const VkDescriptorSet = 9055060000000132
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FEE520
        pScissors[0]:     const VkRect2D = 00000047B9FEE520:
            offset:               VkOffset2D = 00000047B9FEE520:
                x:                       int32_t = 512
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE528:
                width:                  uint32_t = 512
                height:                 uint32_t = 512

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FEE400:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FEE414:
            offset:               VkOffset2D = 00000047B9FEE414:
                x:                       int32_t = 512
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE41C:
                width:                  uint32_t = 512
                height:                 uint32_t = 512
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 0
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FEE220
        pDepthAttachment: const VkRenderingAttachmentInfo* = 00000047B9FEE470:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
            pNext:               const void* = NULL
            imageView:           VkImageView = 33F7660000000075
            imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
            resolveImageView:    VkImageView = 0000000000000000
            resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
            storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
            clearValue:         VkClearValue = 00000047B9FEE4A4 (Union):
                color:         VkClearColorValue = 00000047B9FEE4A4 (Union):
                    float32:                float[4] = 00000047B9FEE4A4
                        float32[0]:                float = 1
                        float32[1]:                float = 1
                        float32[2]:                float = 1
                        float32[3]:                float = 1
                    int32:                int32_t[4] = 00000047B9FEE4A4
                        int32[0]:                int32_t = 1065353216
                        int32[1]:                int32_t = 1065353216
                        int32[2]:                int32_t = 1065353216
                        int32[3]:                int32_t = 1065353216
                    uint32:              uint32_t[4] = 00000047B9FEE4A4
                        uint32[0]:              uint32_t = 1065353216
                        uint32[1]:              uint32_t = 1065353216
                        uint32[2]:              uint32_t = 1065353216
                        uint32[3]:              uint32_t = 1065353216
                depthStencil: VkClearDepthStencilValue = 00000047B9FEE4A4:
                    depth:                     float = 1
                    stencil:                uint32_t = 1065353216
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = FBBAE800000000A2
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE5B8
        pDescriptorSets[0]: const VkDescriptorSet = 2E2941000000001F
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE6E0
        pDynamicOffsets[0]: const uint32_t = 1024

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 47280
    vertexOffset:            int32_t = 8189
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = FBBAE800000000A2
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE5B8
        pDescriptorSets[0]: const VkDescriptorSet = 2E2941000000001F
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE6E0
        pDynamicOffsets[0]: const uint32_t = 768

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    indexCount:             uint32_t = 47232
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 48
    vertexOffset:            int32_t = 32
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 1

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 2048 (VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 1
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC6E0
        pBufferMemoryBarriers[0]: const VkBufferMemoryBarrier = 00000047B9FEC6E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 64 (VK_ACCESS_SHADER_WRITE_BIT)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            buffer:                 VkBuffer = 3E2A2D0000000118
            offset:             VkDeviceSize = 0
            size:               VkDeviceSize = 691200
    imageMemoryBarrierCount: uint32_t = 1
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC930
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEC930:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = C5A188000000011D
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC960:
                aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:             VkPipeline = A171580000000083

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:         VkPipelineLayout = 0F3EAA0000000081
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE9A8
        pDescriptorSets[0]: const VkDescriptorSet = D84B930000000126
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:         VkPipelineLayout = 0F3EAA0000000081
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE9A8
        pDescriptorSets[0]: const VkDescriptorSet = CEA1400000000134
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    groupCountX:            uint32_t = 1920
    groupCountY:            uint32_t = 1080
    groupCountZ:            uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    dstBuffer:              VkBuffer = 3307610000000114
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 4

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 2048 (VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 1
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC6E0
        pBufferMemoryBarriers[0]: const VkBufferMemoryBarrier = 00000047B9FEC6E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 64 (VK_ACCESS_SHADER_WRITE_BIT)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            buffer:                 VkBuffer = B28F040000000119
            offset:             VkDeviceSize = 0
            size:               VkDeviceSize = 13824
    imageMemoryBarrierCount: uint32_t = 0
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC930

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:             VkPipeline = 1983B0000000008A

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:         VkPipelineLayout = C079B30000000088
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE9A8
        pDescriptorSets[0]: const VkDescriptorSet = D84B930000000126
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:         VkPipelineLayout = C079B30000000088
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE9A8
        pDescriptorSets[0]: const VkDescriptorSet = 8E6CA10000000135
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    groupCountX:            uint32_t = 16
    groupCountY:            uint32_t = 9
    groupCountZ:            uint32_t = 24

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    dstBuffer:              VkBuffer = 3307610000000114
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 5

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    srcStageMask: VkPipelineStageFlags = 1 (VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT)
    dstStageMask: VkPipelineStageFlags = 2048 (VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 2
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC6E0
        pBufferMemoryBarriers[0]: const VkBufferMemoryBarrier = 00000047B9FEC6E0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            buffer:                 VkBuffer = C0C03F000000011A
            offset:             VkDeviceSize = 0
            size:               VkDeviceSize = 1600
        pBufferMemoryBarriers[1]: const VkBufferMemoryBarrier = 00000047B9FEC718:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 64 (VK_ACCESS_SHADER_WRITE_BIT)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            buffer:                 VkBuffer = 341746000000011B
            offset:             VkDeviceSize = 0
            size:               VkDeviceSize = 55296
    imageMemoryBarrierCount: uint32_t = 0
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC930

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    pipeline:             VkPipeline = D68CBB0000000091

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:         VkPipelineLayout = 993A4D000000008F
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE9A8
        pDescriptorSets[0]: const VkDescriptorSet = D84B930000000126
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_COMPUTE (1)
    layout:         VkPipelineLayout = 993A4D000000008F
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE9A8
        pDescriptorSets[0]: const VkDescriptorSet = EDF7820000000136
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    groupCountX:            uint32_t = 16
    groupCountY:            uint32_t = 9
    groupCountZ:            uint32_t = 24

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    dstBuffer:              VkBuffer = 3307610000000114
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 6

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    dstBuffer:              VkBuffer = A808D50000000033
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068
    dstBuffer:              VkBuffer = A808D50000000033
    dstOffset:          VkDeviceSize = 4
    size:               VkDeviceSize = 4
    data:                   uint32_t = 0

Thread 0, Frame 0:
vkCreateImageView(device, pCreateInfo, pAllocator, pView) returns VkResult VK_SUCCESS (0):
    device:                 VkDevice = 000001A5A2365D98
    pCreateInfo: const VkImageViewCreateInfo* = 00000047B9FEE7F0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (15)
        pNext:               const void* = NULL
        flags:    VkImageViewCreateFlags = 0
        image:                   VkImage = 08320C0000000121
        viewType:        VkImageViewType = VK_IMAGE_VIEW_TYPE_2D (1)
        format:                 VkFormat = VK_FORMAT_R16G16B16A16_SFLOAT (97)
        components:   VkComponentMapping = 00000047B9FEE818:
            r:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            g:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            b:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
            a:            VkComponentSwizzle = VK_COMPONENT_SWIZZLE_IDENTITY (0)
        subresourceRange: VkImageSubresourceRange = 00000047B9FEE828:
            aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
            baseMipLevel:           uint32_t = 0
            levelCount:             uint32_t = 1
            baseArrayLayer:         uint32_t = 0
            layerCount:             uint32_t = 1
    pAllocator: const VkAllocationCallbacks* = NULL
    pView:              VkImageView* = FC06E9000000013D

Thread 0, Frame 0:
vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    srcStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dstStageMask: VkPipelineStageFlags = 32768 (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT)
    dependencyFlags: VkDependencyFlags = 0
    memoryBarrierCount:     uint32_t = 0
    pMemoryBarriers: const VkMemoryBarrier* = NULL
    bufferMemoryBarrierCount: uint32_t = 3
    pBufferMemoryBarriers: const VkBufferMemoryBarrier* = 00000047B9FEC550
        pBufferMemoryBarriers[0]: const VkBufferMemoryBarrier = 00000047B9FEC550:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            buffer:                 VkBuffer = 3E2A2D0000000118
            offset:             VkDeviceSize = 0
            size:               VkDeviceSize = 691200
        pBufferMemoryBarriers[1]: const VkBufferMemoryBarrier = 00000047B9FEC588:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            buffer:                 VkBuffer = C0C03F000000011A
            offset:             VkDeviceSize = 0
            size:               VkDeviceSize = 1600
        pBufferMemoryBarriers[2]: const VkBufferMemoryBarrier = 00000047B9FEC5C0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (44)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            buffer:                 VkBuffer = 341746000000011B
            offset:             VkDeviceSize = 0
            size:               VkDeviceSize = 55296
    imageMemoryBarrierCount: uint32_t = 3
    pImageMemoryBarriers: const VkImageMemoryBarrier* = 00000047B9FEC7A0
        pImageMemoryBarriers[0]: const VkImageMemoryBarrier = 00000047B9FEC7A0:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            dstAccessMask:     VkAccessFlags = 32 (VK_ACCESS_SHADER_READ_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = B6BEE80000000073
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC7D0:
                aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[1]: const VkImageMemoryBarrier = 00000047B9FEC7E8:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 256 (VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = 08320C0000000121
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC818:
                aspectMask:   VkImageAspectFlags = 1 (VK_IMAGE_ASPECT_COLOR_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1
        pImageMemoryBarriers[2]: const VkImageMemoryBarrier = 00000047B9FEC830:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (45)
            pNext:               const void* = NULL
            srcAccessMask:     VkAccessFlags = 0 (VK_ACCESS_NONE)
            dstAccessMask:     VkAccessFlags = 1024 (VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT)
            oldLayout:         VkImageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL (5)
            newLayout:         VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            srcQueueFamilyIndex:    uint32_t = 4294967295
            dstQueueFamilyIndex:    uint32_t = 4294967295
            image:                   VkImage = C5A188000000011D
            subresourceRange: VkImageSubresourceRange = 00000047B9FEC860:
                aspectMask:   VkImageAspectFlags = 2 (VK_IMAGE_ASPECT_DEPTH_BIT)
                baseMipLevel:           uint32_t = 0
                levelCount:             uint32_t = 1
                baseArrayLayer:         uint32_t = 0
                layerCount:             uint32_t = 1

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 2

Thread 0, Frame 0:
vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pRenderingInfo: const VkRenderingInfo* = 00000047B9FEE7B0:
        sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_INFO (1000044000)
        pNext:               const void* = NULL
        flags:          VkRenderingFlags = 0
        renderArea:             VkRect2D = 00000047B9FEE7C4:
            offset:               VkOffset2D = 00000047B9FEE7C4:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE7CC:
                width:                  uint32_t = 1920
                height:                 uint32_t = 1080
        layerCount:             uint32_t = 1
        viewMask:               uint32_t = 0
        colorAttachmentCount:   uint32_t = 1
        pColorAttachments: const VkRenderingAttachmentInfo* = 00000047B9FEE5D0
            pColorAttachments[0]: const VkRenderingAttachmentInfo = 00000047B9FEE5D0:
                sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
                pNext:               const void* = NULL
                imageView:           VkImageView = FC06E9000000013D
                imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (2)
                resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
                resolveImageView:    VkImageView = 0000000000000000
                resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
                loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR (1)
                storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
                clearValue:         VkClearValue = 00000047B9FEE604 (Union):
                    color:         VkClearColorValue = 00000047B9FEE604 (Union):
                        float32:                float[4] = 00000047B9FEE604
                            float32[0]:                float = 0
                            float32[1]:                float = 0
                            float32[2]:                float = 0
                            float32[3]:                float = 0
                        int32:                int32_t[4] = 00000047B9FEE604
                            int32[0]:                int32_t = 0
                            int32[1]:                int32_t = 0
                            int32[2]:                int32_t = 0
                            int32[3]:                int32_t = 0
                        uint32:              uint32_t[4] = 00000047B9FEE604
                            uint32[0]:              uint32_t = 0
                            uint32[1]:              uint32_t = 0
                            uint32[2]:              uint32_t = 0
                            uint32[3]:              uint32_t = 0
                    depthStencil: VkClearDepthStencilValue = 00000047B9FEE604:
                        depth:                     float = 0
                        stencil:                uint32_t = 0
        pDepthAttachment: const VkRenderingAttachmentInfo* = 00000047B9FEE820:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO (1000044001)
            pNext:               const void* = NULL
            imageView:           VkImageView = 85EF67000000013B
            imageLayout:       VkImageLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL (3)
            resolveMode: VkResolveModeFlagBits = 0 (VK_RESOLVE_MODE_NONE)
            resolveImageView:    VkImageView = 0000000000000000
            resolveImageLayout: VkImageLayout = VK_IMAGE_LAYOUT_UNDEFINED (0)
            loadOp:       VkAttachmentLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD (0)
            storeOp:     VkAttachmentStoreOp = VK_ATTACHMENT_STORE_OP_STORE (0)
            clearValue:         VkClearValue = 00000047B9FEE854 (Union):
                color:         VkClearColorValue = 00000047B9FEE854 (Union):
                    float32:                float[4] = 00000047B9FEE854
                        float32[0]:                float = 1
                        float32[1]:                float = 1
                        float32[2]:                float = 1
                        float32[3]:                float = 1
                    int32:                int32_t[4] = 00000047B9FEE854
                        int32[0]:                int32_t = 1065353216
                        int32[1]:                int32_t = 1065353216
                        int32[2]:                int32_t = 1065353216
                        int32[3]:                int32_t = 1065353216
                    uint32:              uint32_t[4] = 00000047B9FEE854
                        uint32[0]:              uint32_t = 1065353216
                        uint32[1]:              uint32_t = 1065353216
                        uint32[2]:              uint32_t = 1065353216
                        uint32[3]:              uint32_t = 1065353216
                depthStencil: VkClearDepthStencilValue = 00000047B9FEE854:
                    depth:                     float = 1
                    stencil:                uint32_t = 1065353216
        pStencilAttachment: const VkRenderingAttachmentInfo* = NULL

Thread 0, Frame 0:
vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    firstViewport:          uint32_t = 0
    viewportCount:          uint32_t = 1
    pViewports:    const VkViewport* = 00000047B9FEE700
        pViewports[0]:  const VkViewport = 00000047B9FEE700:
            x:                         float = 0
            y:                         float = 1080
            width:                     float = 1920
            height:                    float = -1080
            minDepth:                  float = 0
            maxDepth:                  float = 1

Thread 0, Frame 0:
vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    firstScissor:           uint32_t = 0
    scissorCount:           uint32_t = 1
    pScissors:       const VkRect2D* = 00000047B9FEE6E0
        pScissors[0]:     const VkRect2D = 00000047B9FEE6E0:
            offset:               VkOffset2D = 00000047B9FEE6E0:
                x:                       int32_t = 0
                y:                       int32_t = 0
            extent:               VkExtent2D = 00000047B9FEE6E8:
                width:                  uint32_t = 1920
                height:                 uint32_t = 1080

Thread 0, Frame 0:
vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    firstBinding:           uint32_t = 0
    bindingCount:           uint32_t = 1
    pBuffers:        const VkBuffer* = 000001A5A720E320
        pBuffers[0]:      const VkBuffer = F6D9250000000139
    pOffsets:    const VkDeviceSize* = 00000047B9FEE778
        pOffsets[0]:  const VkDeviceSize = 0

Thread 0, Frame 0:
vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    buffer:                 VkBuffer = 84BE4C0000000138
    offset:             VkDeviceSize = 0
    indexType:           VkIndexType = VK_INDEX_TYPE_UINT32 (1)

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = E750A0000000009A

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 3
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE6D8
        pDescriptorSets[0]: const VkDescriptorSet = F6641E000000013A
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 4
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE708
        pDescriptorSets[0]: const VkDescriptorSet = C4F3070000000021
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE830
        pDynamicOffsets[0]: const uint32_t = 512

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE748
        pDescriptorSets[0]: const VkDescriptorSet = D365DD0000000128
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE748
        pDescriptorSets[0]: const VkDescriptorSet = C5801D0000000131
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE778
        pDescriptorSets[0]: const VkDescriptorSet = 2E2941000000001F
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE8A0
        pDynamicOffsets[0]: const uint32_t = 1024

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    indexCount:             uint32_t = 36
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 47280
    vertexOffset:            int32_t = 8189
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    pipeline:             VkPipeline = E750A0000000009A

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 3
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE6D8
        pDescriptorSets[0]: const VkDescriptorSet = F6641E000000013A
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 4
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE708
        pDescriptorSets[0]: const VkDescriptorSet = C4F3070000000021
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE830
        pDynamicOffsets[0]: const uint32_t = 512

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 1
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE748
        pDescriptorSets[0]: const VkDescriptorSet = D365DD0000000128
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 2
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE748
        pDescriptorSets[0]: const VkDescriptorSet = C5801D0000000131
    dynamicOffsetCount:     uint32_t = 0
    pDynamicOffsets: const uint32_t* = NULL

Thread 0, Frame 0:
vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    pipelineBindPoint: VkPipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS (0)
    layout:         VkPipelineLayout = E150C50000000097
    firstSet:               uint32_t = 0
    descriptorSetCount:     uint32_t = 1
    pDescriptorSets: const VkDescriptorSet* = 00000047B9FEE778
        pDescriptorSets[0]: const VkDescriptorSet = 2E2941000000001F
    dynamicOffsetCount:     uint32_t = 1
    pDynamicOffsets: const uint32_t* = 00000047B9FEE8A0
        pDynamicOffsets[0]: const uint32_t = 768

Thread 0, Frame 0:
vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    indexCount:             uint32_t = 47232
    instanceCount:          uint32_t = 1
    firstIndex:             uint32_t = 48
    vertexOffset:            int32_t = 32
    firstInstance:          uint32_t = 0

Thread 0, Frame 0:
vkCmdEndRenderingKHR(commandBuffer) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8

Thread 0, Frame 0:
vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) returns void:
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8
    dstBuffer:              VkBuffer = 27A9E40000000112
    dstOffset:          VkDeviceSize = 0
    size:               VkDeviceSize = 4
    data:                   uint32_t = 3

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A7BAAC38

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEEC30
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEEC30:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A74C3CB0
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A7BAAC38
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A7D3B018

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEEC30
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEEC30:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A74C4AB0
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A7D3B018
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A7D4D068

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEEC30
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEEC30:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A74C53E0
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A7D4D068
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

Thread 0, Frame 0:
vkEndCommandBuffer(commandBuffer) returns VkResult VK_SUCCESS (0):
    commandBuffer:   VkCommandBuffer = 000001A5A127DBC8

Thread 0, Frame 0:
vkQueueSubmit(queue, submitCount, pSubmits, fence) returns VkResult VK_SUCCESS (0):
    queue:                   VkQueue = 000001A5A23D1898
    submitCount:            uint32_t = 1
    pSubmits:    const VkSubmitInfo* = 00000047B9FEEC30
        pSubmits[0]:  const VkSubmitInfo = 00000047B9FEEC30:
            sType:           VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO (4)
            pNext:               const void* = NULL
            waitSemaphoreCount:     uint32_t = 0
            pWaitSemaphores: const VkSemaphore* = NULL
            pWaitDstStageMask: const VkPipelineStageFlags* = NULL
            commandBufferCount:     uint32_t = 1
            pCommandBuffers: const VkCommandBuffer* = 000001A5A74C46C0
                pCommandBuffers[0]: const VkCommandBuffer = 000001A5A127DBC8
            signalSemaphoreCount:   uint32_t = 0
            pSignalSemaphores: const VkSemaphore* = NULL
    fence:                   VkFence = 0000000000000000

